@using Newtonsoft.Json
@using System.Globalization
@model DATN.Core.ViewModel.Product_EAV.ProductVM_EAV
@{
    var productId = Model.ProductId;
    var existingVariant = Model.Variants.Select(x => new
    {
        Id = x.VariantId,
        Attributes = x.VariantAttributes.ToDictionary(a => a.AttributeValueId, a => a.AttributeValue)
    });
}
<style>
    .product-form {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-top: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-title {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .form-group.row {
        margin-bottom: 15px;
    }

    .description-area {
        width: 100%;
    }

    /* Css Variant */
    .variant-block {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-top: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-title {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .variant-row {
        display: flex;
        margin-bottom: 15px;
    }

        .variant-row .col-6 {
            padding-right: 10px;
        }

            .variant-row .col-6:last-child {
                padding-right: 0;
            }

    .delete-btn {
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 5px 10px;
        margin-left: 10px;
        cursor: pointer;
    }

    .add-value-btn {
        margin-top: 15px;
    }

    .remove-value-btn {
        color: red;
        cursor: pointer;
        font-size: 1.2rem;
        margin-left: 10px;
    }

    /* Css Table Variant */
    .product-section {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        margin-top: 20px;
        background-color: #f9f9f9;
    }

    .form-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #333;
        margin-bottom: 20px;
        border-bottom: 2px solid #007bff;
        padding-bottom: 10px;
    }

    /* Bảng biến thể */
    .table {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
    }

        .table th {
            background-color: #f1f1f1;
            font-weight: bold;
            text-align: center;
            padding: 12px;
        }

        .table tbody tr {
            border-bottom: 1px solid #ddd;
        }

        .table tbody td {
            padding: 10px;
            vertical-align: middle;
            text-align: center;
        }

    /* Nút xóa */
    .btn-danger {
        border-radius: 50%;
        font-size: 14px;
        width: 30px;
        height: 30px;
        line-height: 30px;
        padding: 0;
        margin: 0;
        display: inline-block;
        text-align: center;
    }

    /* Form thuộc tính và giá trị */
    .variant-row {
        display: flex;
        margin-bottom: 20px;
    }

        .variant-row .col-6 {
            padding-right: 15px;
        }

            .variant-row .col-6 select, .variant-row .col-6 input {
                border-radius: 5px;
            }

    /* Button */
    .btn-success, .btn-primary {
        border-radius: 6px;
        padding: 8px 16px;
        font-size: 14px;
    }

    /* Giới hạn chiều rộng */
    .container {
        max-width: 1100px;
        margin: auto;
    }
</style>

<!-- Thông tin sản phẩm -->
<div class="product-form">
    <div class="form-title">Thông tin sản phẩm</div>
    <form asp-action="Edit" method="post" enctype="multipart/form-data">
        <div class="form-group row">
            <div class="col-md-12">
                <label for="ProductName">Tên sản phẩm</label>
                <input type="text" class="form-control" id="ProductName" asp-for="ProductName" placeholder="Nhập tên sản phẩm">
            </div>
        </div>

        <div class="form-group">
            <label for="Description">Mô tả sản phẩm</label>
            <textarea class="form-control description-area" id="Description" asp-for="Description" rows="4" placeholder="Nhập mô tả sản phẩm"></textarea>
        </div>

        <div class="form-group row">
            <div class="col-md-6">
                <label for="BrandId">Thương hiệu</label>
                <select class="form-control" id="BrandId" asp-for="BrandId" asp-items="ViewBag.listBrand">
                </select>
            </div>

            <div class="col-md-6">
                <label for="CategoryProducts">Loại sản phẩm</label>
                <select class="form-control" id="CategoryProducts" asp-for="CategoryProducts" asp-items="ViewBag.listCate">
                </select>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-6">
                <label for="OriginId">Xuất xứ</label>
                <select class="form-control" id="OriginId" asp-for="OriginId" asp-items="ViewBag.listOrigin">
                </select>
            </div>

            <div class="col-md-6">
                <label for="Status">Trạng thái</label>
                <select class="form-control" id="Status" asp-for="Status" asp-items="ViewBag.StatusList">
                </select>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-6">
                <label for="ImagesDefault" class="control-label">Ảnh chính sản phẩm</label>
                <input id="ImagesDefault" name="ImagesDefault" type="file" class="form-control" accept="image/*" />
            </div>

            <div class="col-md-6">
                <label for="Images" class="control-label">Các ảnh khác (tối đa 6)</label>
                <input id="Images" name="Images" type="file" class="form-control" multiple accept="image/*" />
            </div>
        </div>

        <!-- Block thông tin biến thể -->
        <div class="product-section">
            <div class="form-title">Biến thể sản phẩm</div>
            <div class="variant-row">

                <div class="col-12" id="attributeContainer">
                    <!-- Các thuộc tính và giá trị thuộc tính sẽ được hiển thị tại đây -->
                </div>
            </div>
            <!-- Add attribute and value buttons -->
            <div class="row">
                <div class="add-attribute-btn mt-4 col-6">
                    <button type="button" class="btn btn-primary">+ Thêm thuộc tính khác</button>
                </div>
                @* <div class="add-value-btn col-6">
                <button type="button" class="btn btn-success" id="addVariantValueBtn" onclick="addVariantValue()">+ Thêm giá trị mới</button>
                </div> *@
            </div>
        </div>

        <!-- Table Variant -->
        <div class="product-section">
            <table class="table table-bordered mt-3">
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>Tên biến thể</th>
                        <th>Số lượng</th>
                        <th>Giá nhập</th>
                        <th>Giá bán</th>
                        <th>Giá sau chiết khấu</th>
                        <th>Biến thể mặc định</th>
                        <th>Hành động</th>
                        <th>Thông số KT</th>
                    </tr>
                </thead>
                <tbody id="variant-list">
                    <!-- Các biến thể sẽ được hiển thị tại đây -->
                    @foreach (var item in Model.Variants.Select((variant, index) => new { variant, index }))
                    {
                        <tr>
                            <td>@(item.index + 1)</td>
                            <td>
                                <input type="hidden" name="Variants[@item.index].Name" value="@item.variant.VariantName" />
                                @item.variant.VariantName
                            </td>
                            <td>
                                <input type="number" class="form-control quantity" name="Variants[@item.index].Quantity" value="@item.variant.Quantity" min="1" oninput="validateInput(this, 1)" />
                            </td>
                            <td>
                                <input type="number" class="form-control price-import" name="Variants[@item.index].ImportPrice" value="@item.variant.PuscharPrice.ToString("0.##", CultureInfo.InvariantCulture)" min="1000000" oninput="validateInput(this, 1000000)" />
                            </td>
                            <td>
                                <input type="number" class="form-control price-sell" name="Variants[@item.index].SellPrice" value="@item.variant.SalePrice.ToString("0.##", CultureInfo.InvariantCulture)" />
                            </td>
                            <td>
                                <input type="number" class="form-control price-discount" name="Variants[@item.index].AfterDiscountPrice" value="@item.variant.AfterDiscountPrice.ToString("0.##", CultureInfo.InvariantCulture)" />
                            </td>  
                            <td>
                                <input type="radio" name="defaultVariant" class="default-variant" value="@item.index" @(item.index == 0 ? "checked" : "") required onclick="setDefaultVariant(@item.index)" />
                            </td>
                            <td>
          
                            </td>
                            <td>
                                <button type="button" class="btn btn-primary" onclick="toggleSpecifications(this, @item.index)"> +</button>
                            </td>
                        </tr>
                        <tr class="specifications-row" id="specifications-row-@item.index" style="display: none">
                            <td colspan="9">
                                <!-- Điều chỉnh số cột cho phù hợp với bảng của bạn -->
                                <div id="specification-list-@item.index">
                                    @for (var i = 0; i < item.variant.Specifications.Count; i++)
                                    {
                                        <div class="input-group mb-2">
                                            <input type="text" class="form-control" name="Variants[@item.index].Specifications[@i].Key" value="@item.variant.Specifications[i].Key" placeholder="Tên thông số" required />
                                            <input type="text" class="form-control" name="Variants[@item.index].Specifications[@i].Value" value="@item.variant.Specifications[i].Value" placeholder="Giá trị" required />
                                            <button class="btn btn-danger" type="button" onclick="removeSpecificationRow(this)">Xóa</button>
                                        </div>
                                    }
                                </div>
                                <button type="button" class="btn btn-primary" onclick="addSpecificationRow(@item.index)">+ Thêm thông số</button>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>
        <button type="button" onclick="generateVariants()">Tạo Biến Thể</button>

        <!-- Button tạo sản phẩm -->
        <div class="d-flex justify-content-end mt-3">
            <button type="submit" class="btn btn-primary" id="createProductBtn">Create</button>
        </div>
    </form>
</div>

@section Scripts {
    <!-- get value -->
    <script>
        // Lưu trữ các khối thuộc tính đã tạo ra
        let attributeBlocks = new Map();
        var variants = @Html.Raw(JsonConvert.SerializeObject(Model.Variants));
        
        // Giới hạn số thuộc tính được chọn
        function fetchAttributesAndValues(id) {
            console.log(id)
            // Sử dụng template literals với dấu nháy kép để chèn biến id vào URL
            const url = `https://localhost:7095/api/AttributeEAV/GetAttributeValueByProductId/${id}`;

            // Lấy danh sách tất cả các thuộc tính từ API
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    // Lấy container để hiển thị các thuộc tính và giá trị
                    const container = document.getElementById('attributeContainer');

                    // Tạo khối HTML cho từng thuộc tính
                    data.forEach(attribute => {
                        const attributeBlock = document.createElement('div');
                        attributeBlock.classList.add('attribute-block');

                        // Tạo khối HTML cho thuộc tính và các giá trị của nó
                        attributeBlock.innerHTML = `
                            <label>${attribute.attributeName}</label>
                            <input type="hidden" name="attributeIds[]" value="${attribute.attributeId}" />
                            <div class="value-group">
                                ${attribute.attributeValues.map(value => `
                                    <div class="input-group mb-2">
                                        <input type="text" class="form-control" name="attributeValues[]" value="${value.valueText}" />
                                        <input type="hidden" name="attributeValueIds[]" value="${value.attributeValueId}" />
                                        <div class="input-group-append">
                                            <button class="btn btn-danger" type="button" onclick="removeVariantValue(this)">X</button>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                            <button type="button" class="btn btn-secondary" onclick="addVariantValue(this, '${attribute.attributeName}')">+ Thêm giá trị</button>
                        `;

                        // Thêm khối vào container
                        container.appendChild(attributeBlock);
                    });
                })
                .catch(error => console.error('Error fetching attributes and values:', error));
        }
        fetchAttributesAndValues(@productId)
        // Xóa giá trị biến thể
        function removeVariantValue(button) {
            button.closest('.input-group').remove();
        }

        // Thêm giá trị mới cho thuộc tính
        function addVariantValue(button, attribute) {
            const maxValues = 6;
            const valueGroup = button.closest('.attribute-block').querySelector('.value-group');
            const currentValues = valueGroup.querySelectorAll('.input-group').length;

            if (currentValues >= maxValues) {
                alert(`Chỉ có thể thêm tối đa ${maxValues} giá trị cho mỗi thuộc tính.`);
                return;
            }

            const newValueInput = document.createElement('div');
            newValueInput.classList.add('input-group', 'mb-2');
            newValueInput.innerHTML = `
                        <input type="text" class="form-control" placeholder="Nhập giá trị mới" />
                        <div class="input-group-append">
                            <button class="btn btn-danger" type="button" onclick="removeVariantValue(this)">X</button>
                        </div>
                    `;

            valueGroup.appendChild(newValueInput);
        }

    </script>
    <!-- Gen bien the -->
    @* <script>
        function generateVariants() {
            const variantList = document.getElementById('variant-list');
            const attributeBlocks = document.querySelectorAll('.attribute-block');

            const attributeValues = [];

            // Lấy tất cả các giá trị thuộc tính
            attributeBlocks.forEach(block => {
                const values = Array.from(block.querySelectorAll('input[name="attributeValues[]"]')).map(input => input.value);
                attributeValues.push(values);
            });

            // Xóa tất cả các biến thể cũ
            variantList.innerHTML = '';

            // Tạo các biến thể bằng cách kết hợp các giá trị thuộc tính
            const variants = cartesian(attributeValues);
            variants.forEach((variant, index) => {
                const variantName = variant.join(' / '); // Kết hợp tên biến thể

                const row = document.createElement('tr');
                row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${variantName}</td>
                        <td><input type="number" class="form-control quantity" value="10" min="1" oninput="validateInput(this, 1)" /></td>
                        <td><input type="number" class="form-control price-import" value="10000000" min="1000000" oninput="validateInput(this, 1000000)" /></td>
                        <td><input type="number" class="form-control price-sell" value="11000000" min="1" oninput="updatePriceDiscount(this)" /></td>
                        <td><input type="number" class="form-control after-discount-price" value="11000000" min="1" oninput="validateInput(this, 1)" /></td>
                        <td><input type="number" class="form-control year" value="2024" /></td>
                        <td><input type="radio" name="defaultVariant" class="default-variant" required ${index === 0 ? 'checked' : ''} /></td>
                        <td><button type="button" class="btn btn-danger" onclick="removeVariant(this)">Xóa</button></td>
                    `;

                variantList.appendChild(row);
            });

            // Gán sự kiện để tính toán giá sau chiết khấu khi giá bán thay đổi
            updatePriceSell();
        }

        // Hàm tính giá sau chiết khấu khi giá bán thay đổi
        function updatePriceSell() {
            const priceSellInputs = document.querySelectorAll('.price-sell');

            priceSellInputs.forEach(priceSellInput => {
                priceSellInput.addEventListener('input', function () {
                    const afterDiscountInput = priceSellInput.closest('tr').querySelector('.after-discount-price');
                    const sellPrice = parseInt(priceSellInput.value) || 0;
                    afterDiscountInput.value = sellPrice; // Giá sau chiết khấu = giá bán (có thể thêm logic chiết khấu tại đây)
                });
            });
        }

        // Hàm cập nhật giá trị của AfterDiscountPrice khi giá bán thay đổi
        function updatePriceDiscount(input) {
            const row = input.closest('tr');
            const afterDiscountInput = row.querySelector('.after-discount-price');
            const sellPrice = parseInt(input.value) || 0;
            afterDiscountInput.value = sellPrice; // AfterDiscountPrice = Giá bán (thay đổi nếu cần)
        }

        // Hàm kiểm tra và hiển thị lỗi nếu nhập giá trị không hợp lệ
        function validateInput(input, minValue) {
            const value = parseInt(input.value);
            if (isNaN(value) || value < minValue) {
                input.setCustomValidity(`Giá trị phải lớn hơn hoặc bằng ${minValue}`);
                input.reportValidity();
            } else {
                input.setCustomValidity('');
            }
        }

        // Hàm xóa biến thể
        function removeVariant(button) {
            button.closest('tr').remove();
            checkDefaultVariant(); // Kiểm tra biến thể mặc định sau khi xóa
        }

        // Cartesian product - Hàm để kết hợp tất cả giá trị thuộc tính thành các biến thể
        function cartesian(arr) {
            return arr.reduce((a, b) => a.flatMap(d => b.map(e => [...d, e])), [[]]);
        }

        // Kiểm tra xem ít nhất một biến thể mặc định có được chọn không
        document.querySelector('form').addEventListener('submit', function (e) {
            const defaultVariantChecked = document.querySelector('input[name="defaultVariant"]:checked');
            if (!defaultVariantChecked) {
                alert('Phải có ít nhất một biến thể mặc định.');
                e.preventDefault();
            }
        });

        // Kiểm tra biến thể mặc định sau khi xóa biến thể
        function checkDefaultVariant() {
            const defaultVariantChecked = document.querySelector('input[name="defaultVariant"]:checked');
            if (!defaultVariantChecked) {
                const firstVariant = document.querySelector('.default-variant');
                if (firstVariant) firstVariant.checked = true; // Nếu không có biến thể mặc định, chọn ô đầu tiên
            }
        }
    </script> *@
    <!-- add Specification per variant -->
    <script>
        const existingVariant = @Html.Raw(JsonConvert.SerializeObject(existingVariant));
        // Hàm tạo biến thể
        function generateVariants() {
            const variantList = document.getElementById('variant-list');
            const attributeBlocks = document.querySelectorAll('.attribute-block');
            

            const attributeValues = [];

            // Lấy tất cả các giá trị thuộc tính
            attributeBlocks.forEach(block => {
                const values = Array.from(block.querySelectorAll('input[name="attributeValues[]"]')).map(input => input.value);
                attributeValues.push(values);
            });

            // Xóa tất cả các biến thể cũ
            variantList.innerHTML = '';

            // Tạo các biến thể bằng cách kết hợp các giá trị thuộc tính
            const variants = cartesian(attributeValues);
            variants.forEach((variant, index) => {
                const variantName = variant.join(' / '); // Kết hợp tên biến thể

                const row = document.createElement('tr');
                row.innerHTML = `
                            <td>${index + 1}</td>
                            <td><input type="hidden" name="Variants[${index}].Name" value="${variantName}" />${variantName}</td>
                            <td><input type="number" class="form-control quantity" name="Variants[${index}].Quantity" value="10" min="1" oninput="validateInput(this, 1)" /></td>
                            <td><input type="number" class="form-control price-import" name="Variants[${index}].ImportPrice" value="10000000" min="1000000" oninput="validateInput(this, 1000000)" /></td>
                            <td><input type="number" class="form-control price-sell" name="Variants[${index}].SellPrice" value="11000000" /></td>
                            <td><input type="number" class="form-control price-discount" name="Variants[${index}].AfterDiscountPrice" value="11000000" /></td>
                            <td><input type="number" class="form-control year" name="Variants[${index}].YearOfManufacture" value="2024" /></td>
                            <td><input type="radio" name="defaultVariant" class="default-variant" value="${index}" ${index === 0 ? 'checked' : ''} required onclick="setDefaultVariant(${index})" /></td>
                            <td><button type="button" class="btn btn-danger" onclick="removeVariant(this)">Xóa</button></td>
                            <td><button type="button" class="btn btn-primary" onclick="toggleSpecifications(this, ${index})"> +</button></td>
                        `;

                // Khối chứa form nhập thông số kỹ thuật (ẩn ban đầu)
                const specRow = document.createElement('tr');
                specRow.classList.add('specifications-row');
                specRow.style.display = 'none'; // Ban đầu ẩn

                specRow.innerHTML = `
                            <td colspan="9">
                                <div class="variant-specifications">
                                    <div class="specification-list" id="specification-list-${index}"></div>
                                    <button type="button" class="btn btn-secondary" onclick="addSpecificationRow(${index})">+ Thêm thông số</button>
                                </div>
                            </td>
                        `;

                variantList.appendChild(row);
                variantList.appendChild(specRow);
            });

            // Gán sự kiện để tính toán giá bán khi giá nhập thay đổi
            updatePriceSell();
        }

        // Hàm để đặt biến thể mặc định
        function setDefaultVariant(index) {
            document.querySelectorAll('input[name^="Variants"]').forEach(input => {
                if (input.name.includes("IsDefault")) {
                    input.value = 'false'; // Đặt tất cả các biến thể khác là false
                }
            });
            document.querySelector(`input[name="Variants[${index}].IsDefault"]`).value = 'true'; // Đặt biến thể hiện tại là true
        }

        // Kiểm tra xem ít nhất một biến thể mặc định có được chọn không
        document.querySelector('form').addEventListener('submit', function (e) {
            const defaultVariantChecked = document.querySelector('input[name="defaultVariant"]:checked');
            if (!defaultVariantChecked) {
                alert('Phải có ít nhất một biến thể mặc định.');
                e.preventDefault();
            }
        });

        // Hàm mở/đóng phần nhập thông số kỹ thuật
        function toggleSpecifications(button, variantIndex) {
            const specRow = button.closest('tr').nextElementSibling;
            specRow.style.display = specRow.style.display === 'none' ? '' : 'none'; // Toggle hiển thị
        }

        // Hàm thêm dòng nhập thông số kỹ thuật
        function addSpecificationRow(variantIndex) {
            const specificationList = document.getElementById(`specification-list-${variantIndex}`);
            const currentCount = specificationList.querySelectorAll('.input-group').length;

            if (currentCount >= 10) {
                alert('Chỉ có thể thêm tối đa 10 thông số kỹ thuật.');
                return;
            }

            const row = document.createElement('div');
            row.classList.add('input-group', 'mb-2');
            row.innerHTML = `
                <input type="text" class="form-control" name="Variants[${variantIndex}].Specifications[${currentCount}].Name" placeholder="Tên thông số" required />
                <input type="text" class="form-control" name="Variants[${variantIndex}].Specifications[${currentCount}].Value" placeholder="Giá trị" required />
                <button class="btn btn-danger" type="button" onclick="removeSpecificationRow(this)">Xóa</button>
            `;
            specificationList.appendChild(row);
        }

        // Hàm xóa dòng thông số kỹ thuật
        function removeSpecificationRow(button) {
            button.closest('.input-group').remove();
        }

        // Hàm kiểm tra và hiển thị lỗi nếu nhập giá trị không hợp lệ
        function validateInput(input, minValue) {
            const value = parseInt(input.value);
            if (isNaN(value) || value < minValue) {
                input.setCustomValidity(`Giá trị phải lớn hơn hoặc bằng ${minValue}`);
                input.reportValidity();
            } else {
                input.setCustomValidity('');
            }
        }

        // Hàm xóa biến thể
        function removeVariant(button) {
            const variantRow = button.closest('tr');
            variantRow.nextElementSibling.remove(); // Xóa dòng thông số kỹ thuật
            variantRow.remove(); // Xóa dòng biến thể
        }

        // Cartesian product - Hàm để kết hợp tất cả giá trị thuộc tính thành các biến thể
        function cartesian(arr) {
            return arr.reduce((a, b) => a.flatMap(d => b.map(e => [...d, e])), [[]]);
        }
        
    </script>

}