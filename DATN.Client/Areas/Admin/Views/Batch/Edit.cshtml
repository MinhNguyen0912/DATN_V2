@using DATN.Core.Enum
@using DATN.Core.Model
@using DATN.Core.Model.Product_EAV
@using DATN.Core.ViewModel.BatchVM
@using DATN.Core.ViewModel.CategoryVM
@using DATN.Core.ViewModel.Product_EAV
@model Batch 

@{
    ViewData["Title"] = "Edit Batch";
    bool hasAssignVouchers = Model.Vouchers.Where(v => v.Status == VoucherStatus.NotUsed || v.Status == VoucherStatus.Used).Any();
}
<style>
    .fixed-size {
        height: 300px;
        overflow-y: auto;
    }

    .row {
        margin-bottom: 15px;
    }
</style>
<h2>Sửa Đợt Phát Hành</h2>
@if (hasAssignVouchers)
{
    <span>Đợt phát đã có voucher được phát hành hoặc sử dụng</span>
}
<form asp-action="Edit" method="post" id="batchForm">
    <!-- Thông tin Đợt Phát Hành -->
    <fieldset>
        <legend>Thông tin Đợt Phát Hành</legend>

        <div class="form-group">
            <label asp-for="Name">Tên Voucher:</label>
            <input asp-for="Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Description">Mô Tả:</label>
            <textarea asp-for="Description" class="form-control"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Type">Loại Voucher:</label>
            <select asp-for="Type" class="form-control" asp-items="Html.GetEnumSelectList<VoucherType>()" id="VoucherType" >
                <option value="">-- Chọn Loại Voucher --</option>
            </select>
            <span asp-validation-for="Type" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="DiscountType">Loại Giảm Giá:</label>
            <select asp-for="DiscountType" class="form-control" asp-items="Html.GetEnumSelectList<DiscountType>()" id="DiscountType" >
                
                <option value="">-- Chọn Loại Giảm Giá --</option>
            </select>
            <span asp-validation-for="DiscountType" class="text-danger"></span>
        </div>

        <div class="form-group" id="maxDiscountAmountField" style="display:none;">
            <label asp-for="MaxDiscountAmount">Số Tiền Giảm Giá Tối Đa:</label>
            <input asp-for="MaxDiscountAmount" class="form-control" type="number" step="0.01" />
            <span asp-validation-for="MaxDiscountAmount" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="DiscountAmount">Số Tiền Giảm Giá:</label>
            <input asp-for="DiscountAmount" class="form-control" type="number" step="0.01" />
            <span asp-validation-for="DiscountAmount" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="MinOrderAmount">Số Tiền Đơn Hàng Tối Thiểu:</label>
            <input asp-for="MinOrderAmount" class="form-control" type="number" step="0.01" />
            <span asp-validation-for="MinOrderAmount" class="text-danger"></span>
        </div>
    </fieldset>

    <!-- Phạm Vi Áp Dụng -->
    <fieldset>
        <legend>Phạm Vi Áp Dụng</legend>

        <!-- Chọn loại thời gian áp dụng -->
        <div class="form-group">
            <label>Chọn loại thời gian:</label><br />
            <div class="row">
                <div class="col-md-6">
                    <input type="radio" name="timeOption" value="validityPeriod" id="validityPeriodRadio" checked />
                    <label for="validityPeriodRadio">Thời gian áp dụng (StartDate/EndDate)</label>
                </div>
                <div class="col-md-6">
                    <input type="radio" name="timeOption" value="expirationPeriod" id="expirationPeriodRadio" />
                    <label for="expirationPeriodRadio">Thời hạn sử dụng (ExpirationDate)</label>
                </div>
            </div>
        </div>

        <!-- Thời gian áp dụng: StartDate và EndDate -->
        <div id="validityPeriodFields" class="row">
            <div class="form-group col-md-6">
                <label asp-for="StartDate">Ngày Bắt Đầu:</label>
                <input asp-for="StartDate" class="form-control" type="datetime-local" id="StartDate" />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>

            <div class="form-group col-md-6">
                <label asp-for="EndDate">Ngày Kết Thúc:</label>
                <input asp-for="EndDate" class="form-control" type="datetime-local" id="EndDate" />
                <span asp-validation-for="EndDate" class="text-danger"></span>
            </div>
        </div>

        <!-- Thời hạn sử dụng: ExpirationDate -->
        <div id="expirationPeriodField" style="display:none;" class="form-group">
            <label asp-for="ExpirationDate">Thời Gian Hết Hạn (Ngày):</label>
            <input asp-for="ExpirationDate" class="form-control" type="number" id="ExpirationDate" />
            <span asp-validation-for="ExpirationDate" class="text-danger"></span>
        </div>
    </fieldset>

    <button type="submit" class="btn btn-primary">Tạo</button>
</form>

@section Scripts {
    <script>
        var hasAssignVouchers = @Html.Raw(Json.Serialize(hasAssignVouchers));

        function disableFormFields() {
            console.log(hasAssignVouchers); // Kiểm tra giá trị

            // So sánh với giá trị boolean true
            if (hasAssignVouchers === true) {
                var form = document.getElementById('batchForm');
                var elements = form.querySelectorAll('input, textarea, select');

                elements.forEach(function (element) {
                    element.disabled = true;
                });
            }
        }
        document.addEventListener('DOMContentLoaded', function () {
            

            const voucherType = document.getElementById('VoucherType');
            const discountType = document.getElementById('DiscountType');
            const discountAmount = document.getElementById('DiscountAmount');
            const maxDiscountField = document.getElementById('maxDiscountAmountField');
            const startDate = document.getElementById('StartDate');
            const endDate = document.getElementById('EndDate');

            function updateFields() {
                if (voucherType.value === '0') {
                    discountType.value = '0';
                    discountType.disabled = true;  // Vô hiệu hóa chọn Loại Giảm Giá
                } else {
                    discountType.disabled = false; // Bật chọn Loại Giảm Giá
                }
            }

            // Kiểm tra giá trị khi tài liệu được tải
            updateFields();

            voucherType.addEventListener('change', updateFields);
            disableFormFields();
            // Hiển thị MaxDiscountAmount khi DiscountType là Percent (giá trị '0')
            discountType.addEventListener("change", function () {
                var discountTypeValue = this.value;

                if (discountTypeValue === '0') {
                    maxDiscountField.style.display = "block"; // Hiển thị trường MaxDiscountAmount
                } else {
                    maxDiscountField.style.display = "none"; // Ẩn trường MaxDiscountAmount
                }
                validateDiscountAmount();
            });

            // Thiết lập hiển thị ban đầu cho MaxDiscountAmount
            var initialDiscountType = discountType.value;
            if (initialDiscountType === '0') {
                maxDiscountField.style.display = "block";
            } else {
                maxDiscountField.style.display = "none";
            }

            function validateDiscountAmount() {
                if (discountType.value === '0' && parseFloat(discountAmount.value) > 100) {
                    discountAmount.setCustomValidity('Giá trị giảm giá phải nhỏ hơn hoặc bằng 100 khi loại giảm giá là phần trăm.');
                } else {
                    discountAmount.setCustomValidity(''); // Đặt lại kiểm tra
                }
            }

            discountAmount.addEventListener('input', validateDiscountAmount);

            function validateDates() {
                if (startDate.value && endDate.value && new Date(endDate.value) <= new Date(startDate.value)) {
                    endDate.setCustomValidity('Ngày kết thúc phải sau ngày bắt đầu.');
                } else {
                    endDate.setCustomValidity(''); // Đặt lại kiểm tra
                }
            }

            startDate.addEventListener('input', validateDates);
            endDate.addEventListener('input', validateDates);

            document.getElementById("validityPeriodRadio").addEventListener("change", function () {
                if (this.checked) {
                    document.getElementById("validityPeriodFields").style.display = "flex";
                    document.getElementById("expirationPeriodField").style.display = "none";
                }
            });

            document.getElementById("expirationPeriodRadio").addEventListener("change", function () {
                if (this.checked) {
                    document.getElementById("validityPeriodFields").style.display = "none";
                    document.getElementById("expirationPeriodField").style.display = "block";
                }
            });
        });

       

    </script>
}
