@using DATN.Core.ViewModel.InvoiceVM
@using DATN.Core.ViewModel.PendingCartVM
@using System.Globalization
@using DATN.Core.ViewModel.voucherVM
@model PaymentRequest
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Cart";
    ViewData["PageCSS"] = "cart.css";
    // var voucher = ViewData["Voucher"] == null ? new List<DATN.Core.Model.VoucherUser>() : ViewData["Voucher"] as List<DATN.Core.Model.VoucherUser>;
    var pendingCart = ViewData["pendingCart"] as PendingCartVM;
    var invoiceId = TempData["invoiceId"];
    var paymentStatus = TempData["paymentStatus"];
    var voucher =ViewData["Voucher"] as List<VoucherVM>;
}

<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/css/bootstrap.min.css'>
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.2.0/js/bootstrap.min.js'></script>


<div class="cart-container">
    <section>
        <form asp-controller="Cart" asp-action="PaymentProcess" method="post">
            <div class="middleCart">
                <div style="padding: 10px"></div>
                <!-- danh sách sản phẩm-->
                <ul class="listing-cart">
                    @foreach (var item in pendingCart.PendingCartVariants)
                    {

                        <li class="item-cart" data-id="${item.ma}-${item.maTTD}">
                            <div class="imgsp">
                                <a>
                                    <img src="@item.Variant.Product.ImagePath" alt="">
                                </a>
                                <div class="delete-button-container">
                                    <a asp-controller="Cart" asp-action="RemoveVariant" asp-route-variantId="@item.VariantId" asp-route-pendingCartId="@item.PendingCartId" class="delete-button">Xóa</a>
                                </div>
                            </div>
                            <div class="infosp">
                                <div class="name-price" style="align-items:baseline">
                                    <div class="name-container">
                                        <a>@item.Variant.Product.ProductName</a>
                                        <br>
                                        <span style="color:#777;font-size:14px" class="soluongconlai">Còn lại: @item.Variant.Quantity</span>
                                    </div>
                                    @if (item.Variant.MaximumQuantityPerOrder != 0 && item.Variant.Quantity != 0)
                                    {
                                        <div class="price-area">
                                            <span style="font-size:18px" class="final-price">@(string.Format(new CultureInfo("vi-VN"), "{0:#,##0}", item.Variant.AfterDiscountPrice)) VNĐ</span>
                                            @if (item.Variant.Discount != 0)
                                            {
                                                <br>

                                                <span style="color:#666;font-size:14px" class="original-price">@(string.Format(new CultureInfo("vi-VN"), "{0:#,##0}", item.Variant.SalePrice)) VNĐ</span>
                                            }
                                        </div>

                                    }
                                </div>
                                <div class="description-quantity">
                                    <div class="description">
                                        <span>
                                            Loại sản phẩm:
                                            <span>@item.Variant.VariantName</span>
                                        </span>
                                    </div>
                                    <div class="quantity">

                                        @if (item.Variant.Quantity == 0 || item.Variant.MaximumQuantityPerOrder == 0)
                                        {
                                            <p style="font-size:14px;color:#f30c28!important" class="text-danger">Đang hết hàng</p>
                                            <input hidden>

                                        }
                                        else if (item.Variant.Quantity <= item.Variant.MaximumQuantityPerOrder)
                                        {
                                            <button type="button" class="decrease" data-id="@item.Variant.VariantId">-</button>

                                            <input type="number" class="quantitysp" value="@item.Quantity" max="@item.Variant.Quantity" data-id="@item.Variant.VariantId" data-weight="@item.Variant.Weight" data-price="@item.Variant.AfterDiscountPrice" min="0">
                                            <button type="button" class="increase" data-id="@item.Variant.VariantId">+</button>
                                        }
                                        else
                                        {
                                            <button type="button" class="decrease" data-id="@item.Variant.VariantId">-</button>
                                            <input type="number" class="quantitysp" value="@item.Quantity" max="@item.Variant.MaximumQuantityPerOrder" data-price="@item.Variant.AfterDiscountPrice" data-weight="@item.Variant.Weight" data-id="@item.Variant.VariantId" min="0">
                                            <button type="button" class="increase" data-id="@item.Variant.VariantId">+</button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </li>

                    }
                </ul>

                <div class="info-customer">
                    <h4 style="font-size: 16px;font-weight: normal;text-transform: uppercase">Thông tin khách hàng</h4>
                    <div class="fillinfo">
                        <div class="row">
                            <input name="FirstName" class="form-control form-control-sm required-field email-validate" type="text" placeholder="First name" aria-label=".form-control-sm example" id="customerFirstName" required>
                            <input name="LastName" class="form-control form-control-sm required-field" type="text" placeholder="Last name" aria-label=".form-control-sm example"
                                   id="customerLastName" required>
                        </div>
                        <div class="row">
                            <input name="Email" class="form-control form-control-sm required-field" type="email" placeholder="Email" aria-label=".form-control-sm example">
                            <input name="PhoneNumber" class="form-control form-control-sm required-field" type="tel" placeholder="Phone number" aria-label=".form-control-sm example" id="customerPhoneNumber" required>
                        </div>
                    </div>
                </div>

                <div class="choosegetgoods">
                    <h4 style="font-size: 16px;font-weight: normal;text-transform: uppercase">Địa chỉ giao hàng</h4>
                    <div class="filladdress">
                        <div class="row">
                            <div class="col">
                                <select id="provinceSelect" class="form-select address-input address-input-select" aria-label="Tỉnh/Thành Phố">
                                    <option selected disabled hidden>Tỉnh/Thành Phố</option>

                                </select>
                                <select name="to_ward_code" id="wardSelect" class="form-select address-input address-input-select" aria-label="Xã/Phường">
                                    <option selected disabled hidden>Xã/Phường</option>
                                </select>
                            </div>
                            <div class="col">
                                <select name="to_district_id" id="districtSelect" class="form-select address-input address-input-select" aria-label="Quận/Huyện">
                                    <option selected disabled hidden>Quận/Huyện</option>

                                </select>
                                <input name="to_address" required class="form-control address-input address-input-text" type="text" placeholder="số nhà, tên đường" aria-label="Số nhà, tên đường" id="address">
                            </div>
                        </div>
                    </div>
                    <div onclick="CalculateShippingFee()" class="addAddress btn btn-success">Xác nhận thông tin</div>
                </div>
                <div style="margin: 0 0 10px 12px">
                    <input checked type="radio" id="Cash" name="PaymentMethod" value="Cash" />
                    <label for="Cash">Thanh toán bằng tiền mặt</label><br />
                    <input type="radio" id="MomoQR" name="PaymentMethod" value="MomoQR" />
                    <label for="MomoQR">Cổng thanh toán MomoQR</label><br />
                    <input type="radio" id="TheNoiDia" name="PaymentMethod" value="TheNoiDia" />
                    <label for="TheNoiDia">VNPay-Tài khoản ngân hàng nội địa</label><br />
                    <input type="radio" id="TheQuocTe" name="PaymentMethod" value="TheQuocTe" />
                    <label for="TheQuocTe">VNPay-Tài khoản ngân hàng quốc tế</label><br />
                </div>
                <div class="finaltotal">
                    <div class="promotioncodebox_button" onclick="ShowInputPmtCode()">
                        <span>Sử dụng mã giảm giá</span>
                        <span id="arrow" class="arrow">&#9660;</span>
                    </div>
                    <div class="promotioncodebox_input" id="promotioncodebox_input">
                        <div class="form-group">
                            <label class="control-label">Mã giảm giá</label>
                            <select class="form-control" id="voucherSelect" style="max-height: 400px; cursor: pointer;" multiple>
                                <option value="0"> Chọn mã giảm giá</option>
                                @foreach (var item in voucher)
                                {
                                    <option value="@item.Id" data-description="@item.Batch.Description">@item.Batch.Name</option>
                                }
                            </select>
                        </div>
                        <div id="voucherDescription" style="margin-top: 10px; font-style: italic;">
                            Di chuột vào mã giảm giá để xem thông tin mô tả...
                        </div>
                    </div>
                    <div class="totalprice price-box">
                        <strong class="labeltotal">Tiền hàng: </strong>
                        <strong class="red-price pricetotal">Chưa xác nhận thông tin</strong>
                    </div>
                    <div class="shippingFee price-box">
                        <strong class="labeltotal">Phí ship:</strong>
                        <strong class="red-price feeShipping">Chưa xác nhận thông tin</strong>
                    </div>
                    <div class="lastprice price-box">
                        <strong class="labeltotal">Tổng tiền: </strong>
                        <strong class="red-price pricelast">Chưa xác nhận thông tin</strong>
                    </div>
                    <button type="submit" class="submitorder">Đặt hàng</button>
                </div>
            </div>
            <input type="hidden" id="hiddenShippingFee" asp-for="ShippingFee" value="0" />
            <input type="hidden" asp-for="pendingCartId" value="@pendingCart.PendingCartId" />
        </form>
    </section>
</div>


<!-- Modal Thông báo-->
<div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            @if ((string)paymentStatus == "Fail")
            {
                <div class="modal-body text-center p-lg-4">
                    <svg style="width:50%" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 130.2 130.2">
                        <circle class="path circle" fill="none" stroke="#db3646" stroke-width="6" stroke-miterlimit="10" cx="65.1" cy="65.1" r="62.1" />
                        <line class="path line" fill="none" stroke="#db3646" stroke-width="6" stroke-linecap="round" stroke-miterlimit="10" x1="34.4" y1="37.9" x2="95.8" y2="92.3" />
                        <line class="path line" fill="none" stroke="#db3646" stroke-width="6" stroke-linecap="round" stroke-miterlimit="10" x1="95.8" y1="38" X2="34.4" y2="92.2" />
                    </svg>
                    <h4 class="text-danger mt-3">Thanh toán thất bại</h4>
                    <p class="mt-3">Vui lòng thực hiện lại hoặc liên hệ hotline hỗ trợ!</p>
                </div>

            }
            else if ((string)paymentStatus == "Success")
            {
                <div class="modal-body text-center p-lg-4">
                    <svg style="width:50%" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 130.2 130.2">
                        <circle class="path circle" fill="none" stroke="#198754" stroke-width="6" stroke-miterlimit="10" cx="65.1" cy="65.1" r="62.1" />
                        <polyline class="path check" fill="none" stroke="#198754" stroke-width="6" stroke-linecap="round" stroke-miterlimit="10" points="100.2,40.2 51.5,88.8 29.8,67.5 " />
                    </svg>
                    <h4 class="text-success mt-3">Thanh toán thành công</h4>
                    <p class="mt-3">Cảm ơn bạn đã đặt hàng tại shop!</p>
                </div>
            }
        </div>
    </div>
</div>

@* <div id="invoiceId" data-invoice-id="@invoiceId"></div>
<div id="paymentStatus" data-paymentStatus="@paymentStatus"></div> *@


<script>

    var confirmAddress = true
    const token = "af9239df-2402-11ef-8e53-0a00184fe694";
    @{
        var user = ViewData["user"] as DATN.Client.Models.UserInfo;
    }
    // Thêm sự kiện tăng giảm số lượng cho các nút
    document.querySelectorAll('.decrease').forEach(button => {
        button.addEventListener('click', function () {
            const productId = this.dataset.id;
            const inputQuantity = document.querySelector(`.quantitysp[data-id="${productId}"]`);
            let currentQuantity = parseInt(inputQuantity.value);
            if (currentQuantity > 0) {
                inputQuantity.value = currentQuantity - 1;
            }
        });
    });

    document.querySelectorAll('.increase').forEach(button => {
        button.addEventListener('click', function () {
            const productId = this.dataset.id;
            const inputQuantity = document.querySelector(`.quantitysp[data-id="${productId}"]`);
            const currentQuantity = parseInt(inputQuantity.value);
            if (currentQuantity < parseInt(inputQuantity.getAttribute("max"))) {
                inputQuantity.value = currentQuantity + 1;
            }
        });
    });

    function ShowInputPmtCode() {
        var form = document.getElementById("promotioncodebox_input");
        var arrow = document.getElementById("arrow");
        form.classList.toggle("show");

        // Thay đổi mũi tên khi mở/đóng form
        if (form.classList.contains("show")) {
            arrow.innerHTML = "&#9650;"; // Mũi tên lên
        } else {
            arrow.innerHTML = "&#9660;"; // Mũi tên xuống
        }
    }
    // Lấy danh sách các phần tử 'option' trong dropdown
    const voucherSelect = document.getElementById("voucherSelect");
    const descriptionDiv = document.getElementById("voucherDescription");

    // Thêm sự kiện 'mouseover' và 'mouseout' cho từng option
    voucherSelect.addEventListener('mouseover', function (e) {
        if (e.target.tagName === 'OPTION') {
            const description = e.target.getAttribute('data-description');
            descriptionDiv.textContent = description || 'Không có thông tin mô tả';
        }
    });

    // Đặt lại mô tả khi di chuột ra ngoài dropdown
    voucherSelect.addEventListener('mouseout', function (e) {
        if (e.target.tagName === 'OPTION') {
            descriptionDiv.textContent = 'Di chuột vào mã giảm giá để xem thông tin mô tả...';
        }
    });
    // Gắn sự kiện change vào phần tử select
    voucherSelect.addEventListener('change', function () {
     let vouchers = @voucher;
        let selectedOption = this.options[this.selectedIndex];
        let voucherId = parseFloat(selectedOption.getAttribute('value'));
        let voucher = vouchers.find(v => v.Id === voucherId);
        let discount = 0;
        if (voucher) {
            if(Voucher.Batch.Type == 1){
                if(Voucher.Batch.DiscountType == 1){
                    discount = Voucher.Batch.DiscountValue;
                }
                else{
                    discount = Voucher.Batch.DiscountValue * document.getElementsByClassName("pricetotal")[0].textContent.replace(/[^\d.-]/g, '') / 100;
                    if(Voucher.Batch.MaxDiscountAmount != 0 && discount > Voucher.Batch.MaxDiscountAmount){
                        discount = Voucher.Batch.MaxDiscount;
                    })
                }
            }
            else{
                discount = Voucher.Batch.DiscountValue * document.getElementsByClassName("feeShipping")[0].textContent.replace(/[^\d.-]/g, '') / 100 ;
            }
        }
        let totalPrice = 0;
        for (var item of document.querySelectorAll(".quantitysp")) {
            totalPrice += Number.parseInt(item.getAttribute("data-price")) * (Number)(item.value)
        }
        let totalShipFee = Number.parseInt(document.getElementsByClassName("feeShipping")[0].textContent.replace(/[^\d.-]/g, ''))
        let finalPrice = totalPrice + totalShipFee - discount
        document.getElementsByClassName("pricetotal")[0].innerHTML = `${totalPrice.toLocaleString()} VNĐ`
        document.getElementsByClassName("pricelast")[0].innerHTML = `${finalPrice.toLocaleString()} VNĐ`
    });
    async function CalculateShippingFee() {
        let isEmptyCart = true
        for (var item of document.querySelectorAll(".quantitysp")) {
            if (item.value != 0) {
                isEmptyCart = false
                break;
            }
        }
        if (isEmptyCart) {
            alert("Giỏ hàng đang trống")
            return
        }

        for (var item of document.querySelectorAll(".required-field")) {
            if (item.value.trim() == "") {
                alert("Vui lòng điền đầy đủ thông tin")
                return
            }
        }
        var phoneNumber = document.getElementById("customerPhoneNumber").value
        if (!validatePhoneNumber(phoneNumber)) {
            alert("Số điện thoại không hợp lệ")
            return
        }
        for (var item of document.querySelectorAll(".address-input-select")) {
            if (item.selectedIndex == 0 || document.querySelector(".address-input-text").value.trim() == "") {
                alert("Vui lòng chọn địa chỉ trước khi xác nhận")
                return
            }

        }
        confirmAddress = !confirmAddress
        if (confirmAddress) {
            document.querySelector(".addAddress").innerHTML = "Xác nhận thông tin"
            document.querySelector(".submitorder").disabled = true
            document.querySelector(".addAddress").style.backgroundColor = "#157347"
            for (var item of document.querySelectorAll(".address-input")) {
                item.setAttribute("readonly", false)
            }
            for (var item of document.querySelectorAll(".decrease")) {
                item.disabled = false
            }
            for (var item of document.querySelectorAll(".increase")) {
                item.disabled = false
            }
            for (var item of document.querySelectorAll(".quantitysp")) {
                item.setAttribute("readonly", false)
            }
            for (var item of document.querySelectorAll(".required-field")) {
                item.setAttribute("readonly", false)
            }
            document.getElementsByClassName("feeShipping")[0].innerHTML = `Chưa xác nhận thông tin`
            document.getElementsByClassName("pricetotal")[0].innerHTML = `Chưa xác nhận thông tin`
            document.getElementsByClassName("pricelast")[0].innerHTML = `Chưa xác nhận thông tin`
            return
        }
        document.querySelector(".addAddress").innerHTML = "Điền lại thông tin"
        document.querySelector(".addAddress").style.backgroundColor = "#bc0f0f"
        document.querySelector(".submitorder").disabled = false
        for (var item of document.querySelectorAll(".address-input")) {
            item.setAttribute("readonly", true)
        }
        for (var item of document.querySelectorAll(".decrease")) {
            item.disabled = true
        }
        for (var item of document.querySelectorAll(".increase")) {
            item.disabled = true
        }
        for (var item of document.querySelectorAll(".quantitysp")) {
            item.setAttribute("readonly", true)
        }
        for (var item of document.querySelectorAll(".required-field")) {
            item.setAttribute("readonly", true)
        }
        let totalPrice = 0
        for (var item of document.querySelectorAll(".quantitysp")) {
            totalPrice += Number.parseInt(item.getAttribute("data-price")) * (Number)(item.value)
        }
        var items2 = []
        var a = document.querySelectorAll(".quantitysp")
        for (var item of a) {
            for (let i = 0; i < item.value; i++) {
                items2.push((Number)(item.getAttribute("data-weight")))

            }
        }
        var orderCal = calculateShipments(items2, (Number)(10000))


        let to_name = document.getElementById("customerFirstName").value + ' ' + document.getElementById('customerLastName').value;
        let to_phone = document.getElementById("customerPhoneNumber").value;
        let to_address = document.getElementById("address").value;
        let required_note = 'CHOXEMHANGKHONGTHU'
        let to_ward_code = document.getElementById("wardSelect").value;
        let service_type_id = 5;
        let to_district_id = parseInt(document.getElementById("districtSelect").value);
        let height = 50;
        let width = 50;
        let length = 50;
        let payment_type_id = 1;
        var totalShipFee = 0
        for (var item of orderCal) {
            let listItemz = []
            for (var a of item) {
                let itemz = {
                    name: "a",
                    quantity: 1,
                    height: 50,
                    width: 50,
                    length: 50,
                    weight: (Number)(a)
                }
                listItemz.push(itemz)
            }

            let data = {
                weight: item.reduce((total, number) => total + number, 0),
                to_ward_code: to_ward_code,
                service_type_id: service_type_id,
                to_district_id: to_district_id,
                items: listItemz,
                to_name: to_name,
                to_phone: to_phone,
                to_address: to_address,
                required_note: required_note,
                height: height,
                width: width,
                length: length,
                payment_type_id: payment_type_id,
            }
            const response = await fetch("https://dev-online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/fee", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Token": token,
                    "shop_Id": 192491,
                },
                body: JSON.stringify(data)
            });
            let money = await response.json()
            totalShipFee += (Number)(money.data.total)
        }
        let variantUpdates = []
        for (var item of document.querySelectorAll(".quantitysp")) {
            let variantUpdate = {
                variantId: (Number)(item.getAttribute("data-id")),
                pendingCartId: @pendingCart.PendingCartId,
                quantity: (Number)(item.value),
            }
            variantUpdates.push(variantUpdate)
        }
        const response = await fetch("https://localhost:7095/api/PendingCart/UpdatePendingCart?pendingCartId=@pendingCart.PendingCartId", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Token": token,
                "shop_Id": 192491,
            },
            body: JSON.stringify(variantUpdates)
        });
        document.getElementsByClassName("feeShipping")[0].innerHTML = `${totalShipFee.toLocaleString()} VNĐ`
        document.getElementById("hiddenShippingFee").value = totalShipFee
        document.getElementsByClassName("pricetotal")[0].innerHTML = `${totalPrice.toLocaleString()} VNĐ`
        document.getElementsByClassName("pricelast")[0].innerHTML = `${(totalPrice + totalShipFee).toLocaleString()} VNĐ`

    }


    function calculateShipments(weights, maxWeightPerShipment) {
        // Sắp xếp các sản phẩm theo thứ tự giảm dần trọng lượng
        weights.sort((a, b) => b - a);

        // Danh sách các lần ship, mỗi lần ship là một mảng chứa các khối lượng sản phẩm
        const shipments = [];

        weights.forEach(weight => {
            if (weight > maxWeightPerShipment) {
                weight = maxWeightPerShipment
            }
            let added = false;

            // Tìm xem có chuyến ship nào có thể thêm được sản phẩm này mà không vượt quá maxWeightPerShipment
            for (let shipment of shipments) {
                const currentShipmentWeight = shipment.reduce((total, w) => total + w, 0);
                if (currentShipmentWeight + weight <= maxWeightPerShipment) {
                    shipment.push(weight);
                    added = true;
                    break;
                }
            }

            // Nếu không thể thêm sản phẩm vào chuyến ship nào thì tạo một chuyến ship mới
            if (!added) {
                shipments.push([weight]);
            }
        });

        // Trả về danh sách các đơn hàng
        return shipments;
    }


    function GetOrderData(paymentMethod) {
        const to_name = document.getElementById("customerFirstName").value + ' ' + document.getElementById('customerLastName').value;
        const to_phone = document.getElementById("customerPhoneNumber").value;
        const to_address = document.getElementById("address").value;
        const required_note = 'CHOXEMHANGKHONGTHU'
        const to_ward_code = wardSelect.value;
        const service_type_id = 5;
        const to_district_id = parseInt(districtSelect.value);
        const items = GetItemList();
        const weightSummary = items.reduce((total, item) => total + item.weight * item.quantity, 0);
        const height = 50;
        const width = 50;
        const length = 50;
        const payment_type_id = 1;
        return {
            weight: weight,
            to_ward_code: to_ward_code,
            service_type_id: service_type_id,
            to_district_id: to_district_id,
            items: items,
            to_name: to_name,
            to_phone: to_phone,
            to_address: to_address,
            required_note: required_note,
            height: height,
            width: width,
            length: length,
            payment_type_id: payment_type_id,
        };
    }

    // Hàm lấy thông tin hóa đơn
    function GetInvoiceData(paymentMethod) {

        const cart = JSON.parse(localStorage.getItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`)) || [];
        const cartItems = GetCartItem();
        let voucherId = 0;
        let voucherSelect = document.getElementById('voucherSelect');
        if (voucherSelect) {
            let selectedOption = voucherSelect.options[voucherSelect.selectedIndex];
            voucherId = parseFloat(selectedOption.getAttribute('value'));
        }
        // const paymentMethod = getPaymentMethod();
        const paymentMethodMapping = {
            "Cash": 0,
            "MomoQR": 1,
            "VNPay": 2
        };
        const userId = '@user.UserId';
        // let totalAmount = 0;
        // for (const item of cart) {
        //     totalAmount += item.soluong * item.dongia;
        // }
        // const finalAmount = parseFloat(document.querySelector('.pricetotal').textContent.replace(/[^\d.-]/g, ''));
        // const discount = totalAmount - finalAmount;
        let orderData = GetOrderData(paymentMethod)
        return {
            cartItems,
            paymentMethod: paymentMethod,
            userId,
            voucherId: voucherId,
            pendingShippingOrder: {
                to_name: orderData.to_name,
                to_phone: orderData.to_phone,
                to_address: orderData.to_address.replace("-", ","),
                to_ward_code: orderData.to_ward_code,
                to_district_id: orderData.to_district_id.toString(),
                cod_amount: orderData.cod_amount.toString()
            }
            // totalAmount,
            // finalAmount,
            // discount
        }
    }
    // Hàm tạo đơn hàng
    async function CreateOrder(invoiceId) {
        const dataOrder = GetOrderData();
        try {
            const response = await fetch("https://dev-online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Token": token,
                    "shop_Id": 192491
                },
                body: JSON.stringify(dataOrder)
            });
            const text = await response.text();
            if (!response.ok) {
                throw new Error('Failed to create invoice');
            }
            const dataresponse = JSON.parse(text);
            const data = {
                ShippingOrderCode: dataresponse.data.order_code,
                CustomerId: '@user.UserId',
                InvoiceId: invoiceId,
                ShippingFee: dataresponse.data.total_fee
            }

            const ShippingOrder = await fetch("https://localhost:7095/api/ShippingOrder/Create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data)
            });
            if (!ShippingOrder.ok) {
                throw new Error('Failed to create invoice');
            }


        } catch (error) {
            console.error('Error creating CodOrder:', error);
            return null;
        }
    }
    document.addEventListener("DOMContentLoaded", function () {
        const provinceSelect = document.getElementById("provinceSelect");
        const districtSelect = document.getElementById("districtSelect");
        const wardSelect = document.getElementById("wardSelect");

        fetch("https://dev-online-gateway.ghn.vn/shiip/public-api/master-data/province", {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Token": token
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.code == 200) {
                    const provinces = data.data;
                    provinces.forEach(province => {
                        const option = document.createElement("option");
                        option.value = province.ProvinceID;
                        option.textContent = province.ProvinceName;
                        provinceSelect.appendChild(option);
                    });
                } else {
                    console.error("Failed to fetch provinces:", data.message);
                }
            })
            .catch(error => {
                console.error("Error fetching provinces:", error);
            });

        provinceSelect.addEventListener("change", function () {
            const selectedProvinceId = parseInt(this.value);
            districtSelect.innerHTML = '<option selected disabled hidden>Quận/Huyện</option>';
            wardSelect.innerHTML = '<option selected disabled hidden>Xã/Phường</option>';
            fetch(`https://dev-online-gateway.ghn.vn/shiip/public-api/master-data/district?province_id=${selectedProvinceId}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Token": token
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.code == 200) {
                        const districts = data.data;
                        districts.forEach(district => {
                            const option = document.createElement("option");
                            option.value = district.DistrictID;
                            option.textContent = district.DistrictName;
                            districtSelect.appendChild(option);
                        });
                    } else {
                        console.error("Failed to fetch districts:", data.message);
                    }
                })
                .catch(error => {
                    console.error("Error fetching districts:", error);
                });
        });


        districtSelect.addEventListener("change", function () {
            const selectedDistrictId = parseInt(this.value);
            wardSelect.innerHTML = '<option selected disabled hidden>Xã/Phường</option>';
            fetch(`https://dev-online-gateway.ghn.vn/shiip/public-api/master-data/ward?district_id=${selectedDistrictId}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Token": token
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.code == 200) {
                        const wards = data.data;
                        wards.forEach(ward => {
                            const option = document.createElement("option");
                            option.value = ward.WardCode;
                            option.textContent = ward.WardName;
                            wardSelect.appendChild(option);
                        });
                    } else {
                        console.error("Failed to fetch wards:", data.message);
                    }
                })
                .catch(error => {
                    console.error("Error fetching wards:", error);
                });
        });

    });

    function validatePhoneNumber(phoneNumber) {
        // Biểu thức chính quy cho số điện thoại Việt Nam
        const vietnamPhoneNumberPattern = /^(0)(3[2-9]|5[6|8-9]|7[0|6-9]|8[1-9]|9[0-9])[0-9]{7}$/;

        return vietnamPhoneNumberPattern.test(phoneNumber);
    }

</script>

<style>
    .original-price {
        color: black; /* Đặt màu chữ đen */
        text-decoration: line-through; /* Gạch ngang chữ */
    }
    /* Định dạng cho khuyến mãi */
    .promotion-info {
        font-size: 14px; /* Kích thước phông chữ tiêu chuẩn */
        color: #28a745; /* Màu xanh lá cây */
        font-family: Arial, sans-serif; /* Phông chữ phổ biến */
        margin-top: 5px; /* Tạo khoảng cách với phần trên */
    }

    /* Định dạng cho nút mở rộng/thu gọn khuyến mãi */
    .promotion-toggle {
        color: #007bff; /* Màu xanh lam */
        cursor: pointer; /* Con trỏ chuột biến thành tay chỉ */
        font-size: 14px; /* Kích thước phông chữ tiêu chuẩn */
        text-decoration: underline; /* Gạch chân để nhấn mạnh */
        display: inline-block; /* Hiển thị như một khối nội tuyến */
    }

    /* Định dạng cho chi tiết khuyến mãi */
    .promotion-details {
        font-size: 12px; /* Kích thước phông chữ nhỏ hơn */
        color: #333; /* Màu xám đậm */
        background: #f8f9fa; /* Nền màu xám nhạt */
        padding: 10px; /* Tạo khoảng cách bên trong */
        border-radius: 5px; /* Bo góc nhẹ */
        margin-top: 5px; /* Tạo khoảng cách với phần trên */
    }

        .promotion-details.hidden {
            display: none; /* Ẩn thông tin chi tiết khuyến mãi */
        }
</style>