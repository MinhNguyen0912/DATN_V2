// <auto-generated />
using System;
using DATN.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DATN.Core.Migrations
{
    [DbContext(typeof(DATNDbContext))]
    partial class DATNDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DATN.Core.Model.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("BrandId");

                    b.ToTable("Brand", (string)null);

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            ImageUrl = "/Images/Brand/Lg.png",
                            Name = "LG",
                            Status = true
                        },
                        new
                        {
                            BrandId = 2,
                            ImageUrl = "/Images/Brand/Samsung.png",
                            Name = "Samsung",
                            Status = true
                        },
                        new
                        {
                            BrandId = 3,
                            ImageUrl = "/Images/Brand/Toshiba.png",
                            Name = "Toshiba",
                            Status = true
                        },
                        new
                        {
                            BrandId = 4,
                            ImageUrl = "/Images/Brand/Sony.png",
                            Name = "Sony",
                            Status = true
                        },
                        new
                        {
                            BrandId = 5,
                            ImageUrl = "/Images/Brand/Aqua.png",
                            Name = "Aqua",
                            Status = true
                        },
                        new
                        {
                            BrandId = 6,
                            ImageUrl = "/Images/Brand/Xiaomi.png",
                            Name = "Xiaomi",
                            Status = true
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnList")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5429),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5436),
                            Description = "",
                            ImageUrl = "/Images/Home/Luxury.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Hàng cao cấp",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5436)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5442),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5443),
                            Description = "",
                            ImageUrl = "/Images/Home/Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Tivi, Loa, dàn karaoke",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5443)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5444),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5445),
                            Description = "",
                            ImageUrl = "/Images/Home/Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Tủ lạnh, Tủ đông, Tủ mát",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5445)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5537),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5538),
                            Description = "",
                            ImageUrl = "/Images/Home/Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Máy giặt, Máy sấy quần áo",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5538)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5540),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5540),
                            Description = "",
                            ImageUrl = "/Images/Home/Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Máy lạnh, Máy nước nóng",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5540)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5541),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5542),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-1.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Điện gia dụng, Sinh tố, Xay ép",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5542)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5543),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5544),
                            Description = "",
                            ImageUrl = "/Images/Home//Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Bếp điện, Nồi cơm, Đồ bếp",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5544)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5545),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5545),
                            Description = "",
                            ImageUrl = "/Images/Home//Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Máy lọc nước, Nồi chiên",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5546)
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5547),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5547),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-2.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Máy hút bụi, Máy rửa chén",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5555)
                        },
                        new
                        {
                            Id = 10,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5556),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5563),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-3.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Xe đạp, Sức khỏe, Làm đẹp",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5575)
                        },
                        new
                        {
                            Id = 11,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5576),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5577),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-4.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Đồ nghề - dụng cụ sửa chữa",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5577)
                        },
                        new
                        {
                            Id = 12,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5578),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5579),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-5.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Điện thoại, Laptop, Tablet",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5579)
                        },
                        new
                        {
                            Id = 13,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5580),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5580),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-6.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Phụ kiện, Camera, Đồng hồ",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5581)
                        },
                        new
                        {
                            Id = 14,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5587),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5587),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-7.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Máy cũ, Dịch vụ hữu ích",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5587)
                        },
                        new
                        {
                            Id = 15,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5589),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5589),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Tivi",
                            ParentCategoryId = 2,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5589)
                        },
                        new
                        {
                            Id = 16,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5591),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5591),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Loa",
                            ParentCategoryId = 2,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5592)
                        },
                        new
                        {
                            Id = 17,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5593),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5593),
                            Description = "",
                            IsOnList = true,
                            IsVisible = false,
                            Level = 1,
                            Name = "Phụ kiện Tivi",
                            ParentCategoryId = 2,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5594)
                        },
                        new
                        {
                            Id = 18,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5595),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5595),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Tủ lạnh",
                            ParentCategoryId = 3,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5596)
                        },
                        new
                        {
                            Id = 19,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5597),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5597),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Tủ đông",
                            ParentCategoryId = 3,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5598)
                        },
                        new
                        {
                            Id = 20,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5599),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5599),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Tủ mát",
                            ParentCategoryId = 3,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5600)
                        },
                        new
                        {
                            Id = 21,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5601),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5601),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy giặt",
                            ParentCategoryId = 4,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5602)
                        },
                        new
                        {
                            Id = 22,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5603),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5604),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy sấy quần áo",
                            ParentCategoryId = 4,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5604)
                        },
                        new
                        {
                            Id = 23,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5605),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5605),
                            Description = "",
                            IsOnList = true,
                            IsVisible = false,
                            Level = 1,
                            Name = "Phụ kiện máy giặt",
                            ParentCategoryId = 4,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5606)
                        },
                        new
                        {
                            Id = 24,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5607),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5607),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy lạnh",
                            ParentCategoryId = 5,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5608)
                        },
                        new
                        {
                            Id = 25,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5609),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5610),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy nước nóng",
                            ParentCategoryId = 5,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5610)
                        },
                        new
                        {
                            Id = 26,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5612),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5612),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy xay các loại",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5613)
                        },
                        new
                        {
                            Id = 27,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5614),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5614),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy ép trái cây",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5615)
                        },
                        new
                        {
                            Id = 28,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5616),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5616),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Điện gia dụng",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5617)
                        },
                        new
                        {
                            Id = 29,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5618),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5618),
                            Description = "",
                            IsOnList = true,
                            IsVisible = false,
                            Level = 1,
                            Name = "Nồi",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5619)
                        },
                        new
                        {
                            Id = 30,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5620),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5620),
                            Description = "",
                            IsOnList = true,
                            IsVisible = false,
                            Level = 1,
                            Name = "Bếp",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5620)
                        },
                        new
                        {
                            Id = 31,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5622),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5622),
                            Description = "",
                            IsOnList = true,
                            IsVisible = false,
                            Level = 1,
                            Name = "Lò",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5622)
                        },
                        new
                        {
                            Id = 32,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5624),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5624),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Màn hình cong",
                            ParentCategoryId = 15,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5624)
                        },
                        new
                        {
                            Id = 33,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5625),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5626),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Màn hình phẳng",
                            ParentCategoryId = 15,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5626)
                        },
                        new
                        {
                            Id = 34,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5627),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5628),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Siêu mỏng",
                            ParentCategoryId = 15,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5628)
                        },
                        new
                        {
                            Id = 35,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5629),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5630),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Tivi cao cấp",
                            ParentCategoryId = 15,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5630)
                        },
                        new
                        {
                            Id = 36,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5631),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5631),
                            Description = "",
                            IsOnList = false,
                            IsVisible = true,
                            Level = 2,
                            Name = "Tivi thiết kế đặc biệt",
                            ParentCategoryId = 15,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5632)
                        },
                        new
                        {
                            Id = 37,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5635),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5636),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa kéo",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5636)
                        },
                        new
                        {
                            Id = 38,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5645),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5645),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa kéo điện",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5645)
                        },
                        new
                        {
                            Id = 39,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5647),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5647),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa karaoke xách tay",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5648)
                        },
                        new
                        {
                            Id = 40,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5649),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5649),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa bluetooth",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5649)
                        },
                        new
                        {
                            Id = 41,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5651),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5651),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa thanh (SoundBar)",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5651)
                        },
                        new
                        {
                            Id = 42,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5653),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5653),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Dàn Karaoke, Amply",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5653)
                        },
                        new
                        {
                            Id = 43,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5654),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5655),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Dàn âm thanh",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5655)
                        },
                        new
                        {
                            Id = 44,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5657),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5657),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Micro",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5658)
                        },
                        new
                        {
                            Id = 45,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5659),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5659),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa thùng",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5660)
                        },
                        new
                        {
                            Id = 46,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5661),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5661),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa mini",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5662)
                        },
                        new
                        {
                            Id = 47,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5663),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5663),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa đồ chơi",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5663)
                        },
                        new
                        {
                            Id = 48,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5664),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5665),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Cáp HDMI",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5665)
                        },
                        new
                        {
                            Id = 49,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5666),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5667),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Khung treo Tivi",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5667)
                        },
                        new
                        {
                            Id = 50,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5668),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5669),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Điều khiển Tivi",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5669)
                        },
                        new
                        {
                            Id = 51,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5671),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5671),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Android TV Box",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5671)
                        },
                        new
                        {
                            Id = 52,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5672),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5673),
                            Description = "",
                            IsOnList = false,
                            IsVisible = true,
                            Level = 2,
                            Name = "Dán màn Tivi",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5673)
                        },
                        new
                        {
                            Id = 53,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5674),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5675),
                            Description = "",
                            IsOnList = false,
                            IsVisible = true,
                            Level = 2,
                            Name = "Sticker Tivi",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5675)
                        },
                        new
                        {
                            Id = 54,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5676),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5676),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Tủ lạnh 2 cánh",
                            ParentCategoryId = 18,
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5677)
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.CategoryProduct", b =>
                {
                    b.Property<int>("CategoryProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoryProduct", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryProductId = 1,
                            CategoryId = 33,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryProductId = 2,
                            CategoryId = 35,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryProductId = 3,
                            CategoryId = 54,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.CategoryTimeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TimeRangeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TimeRangeId");

                    b.ToTable("CategoryTimeRange");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 15,
                            TimeRangeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 15,
                            TimeRangeId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 15,
                            TimeRangeId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 15,
                            TimeRangeId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 15,
                            TimeRangeId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 15,
                            TimeRangeId = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 15,
                            TimeRangeId = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 15,
                            TimeRangeId = 9
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 15,
                            TimeRangeId = 11
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId");

                    b.HasIndex("InvoiceDetailId")
                        .IsUnique()
                        .HasFilter("[InvoiceDetailId] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DATN.Core.Model.Image", b =>
                {
                    b.Property<int?>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ImageId"));

                    b.Property<string>("ImagePath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ImagePath = "/Images/Component/ListProduct/product1.webp",
                            IsDefault = true,
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 2,
                            ImagePath = "/Images/Component/ListProduct/product2.webp",
                            IsDefault = true,
                            ProductId = 2
                        },
                        new
                        {
                            ImageId = 3,
                            ImagePath = "/Images/Component/ListProduct/product1-1.jpg",
                            IsDefault = false,
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 4,
                            ImagePath = "/Images/Component/ListProduct/product1-2.jpg",
                            IsDefault = false,
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 5,
                            ImagePath = "/Images/Component/ListProduct/product1-3.jpg",
                            IsDefault = false,
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 6,
                            ImagePath = "/Images/Component/ListProduct/product1-4.jpg",
                            IsDefault = false,
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 7,
                            ImagePath = "/Images/Component/ListProduct/product1-5.jpg",
                            IsDefault = false,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VoucherUserId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherUserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("DATN.Core.Model.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailId"));

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<double>("NewPrice")
                        .HasColumnType("float");

                    b.Property<double>("OldPrice")
                        .HasColumnType("float");

                    b.Property<double>("PuscharPrice")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("VariantId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("DATN.Core.Model.Magazine", b =>
                {
                    b.Property<int>("MagazineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MagazineId"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MagazineId");

                    b.ToTable("Magazines");

                    b.HasData(
                        new
                        {
                            MagazineId = 1,
                            Caption = "Danh sách trúng thưởng - Tưng bừng \"Tháng Panasonic\": Cơ hội trúng 102 bộ quà giá trị lên đến 655 triệu đồng",
                            Content = "<h2 style=\"margin-left:0px;\">Cơn sốt game chưa bao giờ hạ nhiệt! Bạn muốn chiến game \"cực phê\" với trải nghiệm đỉnh cao? Chọn ngay <a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh\">màn hình</a> chơi game ROG và nhận quà \"khủng\" - nâng cấp trải nghiệm, chiến thắng mọi thử thách!</h2><p style=\"margin-left:0px;\"><img class=\"image_resized\" style=\"aspect-ratio:845/442;height:auto !important;width:auto;\" src=\"https://cdnv2.tgdd.vn/mwg-static/common/News/1565736/ROG.jpg\" alt=\"Chiến gam hay nhận quà đỉnh\" width=\"845\" height=\"442\"></p><h3 style=\"margin-left:0px;\">1. Thời gian khuyến mãi: Từ 13/08 đến 30/09/2024</h3><h3 style=\"margin-left:0px;\">2. Nội dung chương trình</h3><p style=\"margin-left:0px;\">Trong thời gian khuyến mãi, khi mua mua <a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh/asus-xg27acs-27-inch-2k\">Màn hình Asus Gaming ROG Strix XG27ACS</a> tại Thế giới Di động và Điện máy XANH, bạn sẽ nhận ngay 01 <a href=\"https://rog.asus.com/vn/mice-mouse-pads/mice/ambidextrous/rog-strix-impact-iii-model/\">Chuột ROG STRIX IMPACT III</a>.</p><p style=\"margin-left:0px;\">Áp dụng cho cả mua online và offline.</p><p style=\"margin-left:0px;\">Chương trình có thể kết thúc sớm nếu hết quà.</p><p style=\"margin-left:0px;\">Hạn chót đăng ký nhận quà: 03/10/2024.</p><h3 style=\"margin-left:0px;\">3. Sản phẩm áp dụng</h3><p style=\"margin-left:0px;\"><a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh/asus-xg27acs-27-inch-2k?itm_source=khuyenmai&amp;itm_medium=shortcode&amp;itm_content=325113\"><img class=\"image_resized\" style=\"aspect-ratio:600/600;height:auto !important;width:150px;\" src=\"https://cdn.tgdd.vn/Products/Images/5697/325113/asus-xg27acs-27-inch-2k-thumb-600x600.jpg\" width=\"600\" height=\"600\"></a></p><figure class=\"image image_resized\" style=\"height:auto !important;width:40px !important;\"><a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh/asus-xg27acs-27-inch-2k?itm_source=khuyenmai&amp;itm_medium=shortcode&amp;itm_content=325113\"><img style=\"aspect-ratio:40/40;\" src=\"https://cdn.tgdd.vn/ValueIcons/label-baohanh3nam.png\" width=\"40\" height=\"40\"></a></figure><p style=\"margin-left:0px;\"><a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh/asus-xg27acs-27-inch-2k?itm_source=khuyenmai&amp;itm_medium=shortcode&amp;itm_content=325113\"><span style=\"color:rgb(51,51,51);\"><strong>Asus Gaming 27 inch 2K XG27ACS</strong></span></a></p><p style=\"margin-left:0px;\">Ngừng kinh doanh</p><p style=\"margin-left:0px;\"><a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh/asus-xg27acs-27-inch-2k?itm_source=khuyenmai&amp;itm_medium=shortcode&amp;itm_content=325113\">Xem chi tiết</a></p><h3 style=\"margin-left:0px;\">4. Cách thức nhận quà</h3><p style=\"margin-left:0px;\">Click vào nút \"Đăng ký\" trên website sự kiện <a href=\"https://www.asus.com/vn/events/infoM/activity_ROGLCD\">https://www.asus.com/vn/events/infoM/activity_ROGLCD</a>.</p><p style=\"margin-left:0px;\">- Đính kèm hình ảnh hóa đơn mua hàng, phiếu thu, phiếu xuất kho có dấu xác nhận của cửa hàng, thể hiện rõ tên sản phẩm và ngày mua hàng trong thời gian chương trình diễn ra.</p><p style=\"margin-left:0px;\">- Đính kèm ảnh chụp số S/N của sản phẩm.</p><p style=\"margin-left:0px;\">- Điền serial của sản phẩm.</p><p style=\"margin-left:0px;\">- Điền Họ và tên người nhận quà.</p><p style=\"margin-left:0px;\">- Điền Địa chỉ nhận quà.</p><p style=\"margin-left:0px;\">- Điền Số điện thoại liên hệ.</p><p style=\"margin-left:0px;\">Hình chụp số S/N trên sản phẩm phải chụp kèm với hoá đơn, chỉ chấp nhận hình chụp số S/N trên sản phẩm, số S/N trên hộp không có hiệu lực.</p><p style=\"margin-left:0px;\"><img class=\"image_resized\" style=\"aspect-ratio:732/786;height:auto !important;width:auto;\" src=\"https://cdnv2.tgdd.vn/mwg-static/common/News/1565736/image1%20%283%29.jpg\" alt=\"Bước 1\" width=\"732\" height=\"786\"></p><p style=\"margin-left:0px;\"><img class=\"image_resized\" style=\"aspect-ratio:732/753;height:auto !important;width:100%;\" src=\"https://cdnv2.tgdd.vn/mwg-static/common/News/1565736/image2%20%283%29.jpg\" alt=\"Bước 2\" width=\"732\" height=\"753\"></p><h3 style=\"margin-left:0px;\">4. Thông tin lưu ý</h3><p style=\"margin-left:0px;\">- Trong trường hợp không thể đăng ký trên hệ thống, quý khách hàng vui lòng gửi thông tin nhận quà như bên dưới về địa chỉ Email: dangkyasus@gmail.com với tiêu đề: \"[Khuyen mai] LCD GAMING\".</p><p style=\"margin-left:0px;\">- ASUS sẽ kiểm tra và liên hệ gửi quà tới bạn trong 20 ngày làm việc (trừ thứ 7 &amp; Chủ nhật).</p><p style=\"margin-left:0px;\">- Chương trình không áp dụng đồng thời với các chương trình khuyến mãi khác.</p><p style=\"margin-left:0px;\">- Quà tặng không có giá trị quy đổi thành tiền mặt hoặc các giá trị khác tương đương.</p><p style=\"margin-left:0px;\">- Hóa đơn/ phiếu thu/ phiếu xuất kho phải có con dấu của cửa hàng bán lẻ.</p><p style=\"margin-left:0px;\">- Chương trình chỉ dành cho khách hàng mua lẻ từ cửa hàng, tất cả hóa đơn từ nhà phân phối đều không được tham gia chương trình khuyến mãi này.</p><p style=\"margin-left:0px;\">- Dung lượng hình ảnh hóa đơn tải lên hệ thống &lt;1Mb.</p><p style=\"margin-left:0px;\">- Trong trường hợp cần thiết nhằm bảo đảm quyền lợi khách hàng, phía ASUS sẽ cần thêm những thông tin khác để xác định khách mua hàng là chính xác như: hóa đơn đỏ, giấy tờ tùy thân có ảnh đại diện,...</p><p style=\"margin-left:0px;\">Đây là chương trình của ASUS không phải của dienmayxanh.com và thegioididong.com, mọi góp ý hay thắc mắc khác về chương trình, xin vui lòng post tại <a href=\"https://www.facebook.com/share/g/NB6YhgtTY4wDwQ47/?mibextid=K35XfP\">Hội linh kiện PC ASUS ROG Việt Nam</a>.</p>",
                            CreateAt = new DateTime(2024, 8, 31, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(4066),
                            Image = "/Images/Magazine/Picture1.jpg",
                            Status = 1
                        },
                        new
                        {
                            MagazineId = 2,
                            Caption = "Mua ngay máy lạnh Daikin: Thêm năm bảo hành, an tâm chất \"Nhật\"",
                            Content = "Content 2",
                            CreateAt = new DateTime(2024, 9, 1, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(4072),
                            Image = "/Images/Magazine/Picture2.jpg",
                            Status = 1
                        },
                        new
                        {
                            MagazineId = 3,
                            Caption = "Mua sớm máy lạnh - Tặng 2 lần vệ sinh chỉ có tại Điện máy XANH | Mới 2024",
                            Content = "Content 3",
                            CreateAt = new DateTime(2024, 9, 2, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(4073),
                            Image = "/Images/Magazine/Picture3.jpg",
                            Status = 1
                        },
                        new
                        {
                            MagazineId = 4,
                            Caption = "Khai lộc thăng hạng, vượt đỉnh thăng hoa: Mua Tivi LG nhận ưu đãi đến 51.000.000đ cùng gói ứng dụng giải trí hấp dẫn",
                            Content = "Content 4",
                            CreateAt = new DateTime(2024, 9, 3, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(4075),
                            Image = "/Images/Magazine/Picture4.jpg",
                            Status = 1
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Origin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Origins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5761),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5760),
                            Description = "Xuất xứ: Trung Quốc",
                            Name = "Trung Quốc",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5760)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5764),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5763),
                            Description = "Xuất xứ: Hàn Quốc",
                            Name = "Hàn Quốc",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5764)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5767),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5765),
                            Description = "Xuất xứ: Mỹ",
                            Name = "Mỹ",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5766)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5769),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5768),
                            Description = "Xuất xứ: Nhật Bản",
                            Name = "Nhật Bản",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5768)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5771),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5770),
                            Description = "Xuất xứ: Đức",
                            Name = "Đức",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5770)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5773),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5771),
                            Description = "Xuất xứ: Anh",
                            Name = "Anh",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5772)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5775),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5774),
                            Description = "Xuất xứ: Pháp",
                            Name = "Pháp",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5774)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5777),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5776),
                            Description = "Xuất xứ: Việt Nam",
                            Name = "Việt Nam",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5776)
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5779),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5778),
                            Description = "Xuất xứ: Úc",
                            Name = "Úc",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5779)
                        },
                        new
                        {
                            Id = 10,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5782),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5781),
                            Description = "Xuất xứ: Canada",
                            Name = "Canada",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(5781)
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.PaymentInfo", b =>
                {
                    b.Property<int>("PaymentInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentInfoId"));

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int");

                    b.HasKey("PaymentInfoId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.ToTable("PaymentInfos");
                });

            modelBuilder.Entity("DATN.Core.Model.PendingCart", b =>
                {
                    b.Property<int>("PendingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PendingCartId"));

                    b.HasKey("PendingCartId");

                    b.ToTable("PendingCart");

                    b.HasData(
                        new
                        {
                            PendingCartId = 1
                        },
                        new
                        {
                            PendingCartId = 2
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.PendingCartVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PendingCartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PendingCartId");

                    b.HasIndex("VariantId");

                    b.ToTable("PendingCartVariant");
                });

            modelBuilder.Entity("DATN.Core.Model.ProductPromotion", b =>
                {
                    b.Property<int>("ProductPromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductPromotionId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.HasKey("ProductPromotionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ProductPromotions");

                    b.HasData(
                        new
                        {
                            ProductPromotionId = 1,
                            ProductId = 1,
                            PromotionId = 11
                        },
                        new
                        {
                            ProductPromotionId = 2,
                            ProductId = 2,
                            PromotionId = 11
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.AttributeValue_EAV", b =>
                {
                    b.Property<int>("AttributeValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeValueId"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("ValueText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeValueId");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeValue_EAVs");

                    b.HasData(
                        new
                        {
                            AttributeValueId = 1,
                            AttributeId = 1,
                            ValueText = "Đen"
                        },
                        new
                        {
                            AttributeValueId = 2,
                            AttributeId = 1,
                            ValueText = "Trắng"
                        },
                        new
                        {
                            AttributeValueId = 3,
                            AttributeId = 2,
                            ValueText = "50 inch"
                        },
                        new
                        {
                            AttributeValueId = 4,
                            AttributeId = 2,
                            ValueText = "60 inch"
                        },
                        new
                        {
                            AttributeValueId = 5,
                            AttributeId = 3,
                            ValueText = "40 lít"
                        },
                        new
                        {
                            AttributeValueId = 6,
                            AttributeId = 3,
                            ValueText = "50 lít"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.Attribute_EAV", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeId"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeId");

                    b.ToTable("Attribute_EAVs");

                    b.HasData(
                        new
                        {
                            AttributeId = 1,
                            AttributeName = "Màu sắc"
                        },
                        new
                        {
                            AttributeId = 2,
                            AttributeName = "Kích thước"
                        },
                        new
                        {
                            AttributeId = 3,
                            AttributeName = "Dung tích"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.Product_EAV", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OriginId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OriginId");

                    b.ToTable("Product_EAVs");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            BrandId = 2,
                            Description = "<p><span style=\"color:#ff4500;\"><strong>Lorem ipsum dolor sit amet</strong></span>, consectetur adipiscing elit. Vivamus <u>lacinia odio vitae</u> vestibulum <em>vestibulum. Cras</em> vehicula, mi eget <span style=\"color:#00bfff;\">dictum cursus</span>, sapien est ultrices lectus, at volutpat sapien enim non mauris. Proin euismod nisl sit amet <span style=\"background-color:#ffff00;\">mi gravida, non venenatis lectus auctor</span>. Aenean sit amet nulla id dui facilisis scelerisque. <span style=\"font-size:18px;\">Nullam non leo libero.</span></p><p>Mauris <span style=\"font-family:Georgia,serif;\"><strong>finibus</strong></span> orci nec ante auctor, id aliquam <span style=\"color:#228b22;\">metus volutpat</span>. Suspendisse consequat lorem quis risus ultricies, id tempus odio dapibus. Aliquam erat volutpat. Donec tincidunt, sapien nec gravida blandit, <u>magna justo ultrices dui</u>, a scelerisque augue erat in erat.</p><p><span style=\"color:#ff69b4;\"><em>Fusce efficitur</em></span> erat eget justo vulputate, id <span style=\"background-color:#7fff00;\">volutpat justo</span> ultrices. Vivamus ut ultricies odio, at dignissim leo. <span style=\"font-size:20px;\"><u>Pellentesque nec purus magna</u>.</span> Donec ut vehicula lectus. Etiam fringilla purus sed nulla facilisis, ac malesuada orci blandit.</p><p>Nam vehicula, magna ut malesuada <span style=\"color:#8a2be2;\"><strong>porttitor</strong></span>, odio libero consequat libero, sit amet venenatis felis turpis id mi. Integer ullamcorper lorem <u>quis justo sagittis</u>, non tincidunt nulla vestibulum. <span style=\"background-color:#ffebcd;\">Praesent vel lacus libero.</span> Sed non <em>luctus</em> metus. Aenean id <span style=\"color:#dc143c;\"><u>ante sit amet libero ultrices dictum</u></span>. Sed sit amet felis eu felis bibendum tincidunt.</p><p><span style=\"color:#00008b;\"><strong>In tempor felis</strong></span> ac ligula faucibus, at pellentesque lacus lacinia. Curabitur aliquet, sapien nec cursus tincidunt, sem neque facilisis justo, et suscipit libero mauris non libero. Nulla facilisi. Proin id malesuada felis. <span style=\"font-size:16px;\"><u>Quisque a auctor metus</u>.</span></p>",
                            OriginId = 1,
                            ProductName = "Samsung Smart TV QLED QA55Q70C",
                            Status = 1
                        },
                        new
                        {
                            ProductId = 2,
                            BrandId = 1,
                            Description = "<p><span style=\"color:#ff4500;\"><strong>Lorem ipsum dolor sit amet</strong></span>, consectetur adipiscing elit. Vivamus <u>lacinia odio vitae</u> vestibulum <em>vestibulum. Cras</em> vehicula, mi eget <span style=\"color:#00bfff;\">dictum cursus</span>, sapien est ultrices lectus, at volutpat sapien enim non mauris. Proin euismod nisl sit amet <span style=\"background-color:#ffff00;\">mi gravida, non venenatis lectus auctor</span>. Aenean sit amet nulla id dui facilisis scelerisque. <span style=\"font-size:18px;\">Nullam non leo libero.</span></p><p>Mauris <span style=\"font-family:Georgia,serif;\"><strong>finibus</strong></span> orci nec ante auctor, id aliquam <span style=\"color:#228b22;\">metus volutpat</span>. Suspendisse consequat lorem quis risus ultricies, id tempus odio dapibus. Aliquam erat volutpat. Donec tincidunt, sapien nec gravida blandit, <u>magna justo ultrices dui</u>, a scelerisque augue erat in erat.</p><p><span style=\"color:#ff69b4;\"><em>Fusce efficitur</em></span> erat eget justo vulputate, id <span style=\"background-color:#7fff00;\">volutpat justo</span> ultrices. Vivamus ut ultricies odio, at dignissim leo. <span style=\"font-size:20px;\"><u>Pellentesque nec purus magna</u>.</span> Donec ut vehicula lectus. Etiam fringilla purus sed nulla facilisis, ac malesuada orci blandit.</p><p>Nam vehicula, magna ut malesuada <span style=\"color:#8a2be2;\"><strong>porttitor</strong></span>, odio libero consequat libero, sit amet venenatis felis turpis id mi. Integer ullamcorper lorem <u>quis justo sagittis</u>, non tincidunt nulla vestibulum. <span style=\"background-color:#ffebcd;\">Praesent vel lacus libero.</span> Sed non <em>luctus</em> metus. Aenean id <span style=\"color:#dc143c;\"><u>ante sit amet libero ultrices dictum</u></span>. Sed sit amet felis eu felis bibendum tincidunt.</p><p><span style=\"color:#00008b;\"><strong>In tempor felis</strong></span> ac ligula faucibus, at pellentesque lacus lacinia. Curabitur aliquet, sapien nec cursus tincidunt, sem neque facilisis justo, et suscipit libero mauris non libero. Nulla facilisi. Proin id malesuada felis. <span style=\"font-size:16px;\"><u>Quisque a auctor metus</u>.</span></p>",
                            OriginId = 1,
                            ProductName = "Tủ lạnh LG Inverter Multi Door GR-B50BL",
                            Status = 1
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.Specification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("Specification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "Kích thước màn hình",
                            Value = "50 inch",
                            VariantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Key = "Độ phân giải",
                            Value = "3840 x 2160",
                            VariantId = 1
                        },
                        new
                        {
                            Id = 3,
                            Key = "Hỗ trợ HDR",
                            Value = "Có",
                            VariantId = 1
                        },
                        new
                        {
                            Id = 4,
                            Key = "Smart TV",
                            Value = "Có",
                            VariantId = 1
                        },
                        new
                        {
                            Id = 5,
                            Key = "Cổng HDMI",
                            Value = "3 cổng",
                            VariantId = 1
                        },
                        new
                        {
                            Id = 6,
                            Key = "Kích thước màn hình",
                            Value = "60 inch",
                            VariantId = 2
                        },
                        new
                        {
                            Id = 7,
                            Key = "Độ phân giải",
                            Value = "3840 x 2160",
                            VariantId = 2
                        },
                        new
                        {
                            Id = 8,
                            Key = "Hỗ trợ HDR",
                            Value = "Có",
                            VariantId = 2
                        },
                        new
                        {
                            Id = 9,
                            Key = "Smart TV",
                            Value = "Có",
                            VariantId = 2
                        },
                        new
                        {
                            Id = 10,
                            Key = "Cổng HDMI",
                            Value = "4 cổng",
                            VariantId = 2
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.Variant", b =>
                {
                    b.Property<int>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VariantId"));

                    b.Property<decimal>("AfterDiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumQuantityPerOrder")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("PuscharPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("VariantId");

                    b.HasIndex("ProductId");

                    b.ToTable("Variants");

                    b.HasData(
                        new
                        {
                            VariantId = 1,
                            AfterDiscountPrice = 70000m,
                            IsDefault = true,
                            MaximumQuantityPerOrder = 3,
                            ProductId = 1,
                            PuscharPrice = 50000m,
                            Quantity = 100,
                            SalePrice = 75000m,
                            VariantName = "Đen/50 inch",
                            Weight = 5000
                        },
                        new
                        {
                            VariantId = 2,
                            AfterDiscountPrice = 71000m,
                            IsDefault = false,
                            MaximumQuantityPerOrder = 4,
                            ProductId = 1,
                            PuscharPrice = 52000m,
                            Quantity = 50,
                            SalePrice = 78000m,
                            VariantName = "Đen/60 inch",
                            Weight = 6000
                        },
                        new
                        {
                            VariantId = 3,
                            AfterDiscountPrice = 70500m,
                            IsDefault = false,
                            MaximumQuantityPerOrder = 5,
                            ProductId = 1,
                            PuscharPrice = 48000m,
                            Quantity = 75,
                            SalePrice = 73000m,
                            VariantName = "Trắng/50 inch",
                            Weight = 5000
                        },
                        new
                        {
                            VariantId = 4,
                            AfterDiscountPrice = 71000m,
                            IsDefault = false,
                            MaximumQuantityPerOrder = 6,
                            ProductId = 1,
                            PuscharPrice = 49000m,
                            Quantity = 80,
                            SalePrice = 74000m,
                            VariantName = "Trắng/60 inch",
                            Weight = 6000
                        },
                        new
                        {
                            VariantId = 5,
                            AfterDiscountPrice = 71000m,
                            IsDefault = true,
                            MaximumQuantityPerOrder = 7,
                            ProductId = 2,
                            PuscharPrice = 49000m,
                            Quantity = 0,
                            SalePrice = 74000m,
                            VariantName = "Đen/40 lít",
                            Weight = 20000
                        },
                        new
                        {
                            VariantId = 6,
                            AfterDiscountPrice = 71000m,
                            IsDefault = false,
                            MaximumQuantityPerOrder = 8,
                            ProductId = 2,
                            PuscharPrice = 49000m,
                            Quantity = 80,
                            SalePrice = 74000m,
                            VariantName = "Đen/50 lít",
                            Weight = 22000
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.VariantAttribute", b =>
                {
                    b.Property<int>("VariantAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VariantAttributeId"));

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("VariantAttributeId");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantAttributes");

                    b.HasData(
                        new
                        {
                            VariantAttributeId = 1,
                            AttributeValueId = 1,
                            VariantId = 1
                        },
                        new
                        {
                            VariantAttributeId = 2,
                            AttributeValueId = 3,
                            VariantId = 1
                        },
                        new
                        {
                            VariantAttributeId = 3,
                            AttributeValueId = 1,
                            VariantId = 2
                        },
                        new
                        {
                            VariantAttributeId = 4,
                            AttributeValueId = 4,
                            VariantId = 2
                        },
                        new
                        {
                            VariantAttributeId = 5,
                            AttributeValueId = 2,
                            VariantId = 3
                        },
                        new
                        {
                            VariantAttributeId = 6,
                            AttributeValueId = 3,
                            VariantId = 3
                        },
                        new
                        {
                            VariantAttributeId = 7,
                            AttributeValueId = 2,
                            VariantId = 4
                        },
                        new
                        {
                            VariantAttributeId = 8,
                            AttributeValueId = 4,
                            VariantId = 4
                        },
                        new
                        {
                            VariantAttributeId = 9,
                            AttributeValueId = 1,
                            VariantId = 5
                        },
                        new
                        {
                            VariantAttributeId = 10,
                            AttributeValueId = 5,
                            VariantId = 5
                        },
                        new
                        {
                            VariantAttributeId = 11,
                            AttributeValueId = 1,
                            VariantId = 6
                        },
                        new
                        {
                            VariantAttributeId = 12,
                            AttributeValueId = 6,
                            VariantId = 6
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("HowToParticipate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Percent")
                        .HasColumnType("float");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3863),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3872),
                            Description = "Khuyến mãi giảm giá 10% cho tất cả các sản phẩm",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3878),
                            IsActive = false,
                            Name = "Giảm giá 10%",
                            Percent = 10.0,
                            To = new DateTime(2024, 9, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3879),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3875)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3885),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3886),
                            Description = "Chương trình mua 1 tặng 1 cho sản phẩm đã chọn",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3887),
                            IsActive = false,
                            Name = "Mua 1 tặng 1",
                            Percent = 0.0,
                            To = new DateTime(2024, 10, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3888),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3886)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3889),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3889),
                            Description = "Miễn phí vận chuyển cho đơn hàng trên 500,000 VNĐ",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3890),
                            IsActive = false,
                            Name = "Miễn phí vận chuyển",
                            Percent = 0.0,
                            To = new DateTime(2024, 11, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3891),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3890)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3892),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3892),
                            Description = "Nhận voucher trị giá 100,000 VNĐ cho mỗi đơn hàng",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3894),
                            IsActive = false,
                            Name = "Tặng voucher 100,000 VNĐ",
                            Percent = 0.0,
                            To = new DateTime(2024, 12, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3894),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3893)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3895),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3895),
                            Description = "Khuyến mãi giảm giá 50% cho tất cả sản phẩm mới ra mắt",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3897),
                            IsActive = false,
                            Name = "Giảm 50% cho sản phẩm mới",
                            Percent = 50.0,
                            To = new DateTime(2025, 1, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3897),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3896)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3898),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3899),
                            Description = "Nhận quà tặng hấp dẫn khi đặt hàng trên 1,000,000 VNĐ",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3900),
                            IsActive = false,
                            Name = "Tặng quà cho đơn hàng trên 1,000,000 VNĐ",
                            Percent = 0.0,
                            To = new DateTime(2025, 2, 28, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3900),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3899)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3901),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3902),
                            Description = "Khuyến mãi giảm giá 20% cho tất cả sản phẩm phụ kiện",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3903),
                            IsActive = false,
                            Name = "Giảm 20% cho sản phẩm phụ kiện",
                            Percent = 20.0,
                            To = new DateTime(2025, 3, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3904),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3902)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3905),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3906),
                            Description = "Chương trình đổi sản phẩm cũ lấy sản phẩm mới với giá ưu đãi",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3907),
                            IsActive = false,
                            Name = "Đổi cũ lấy mới",
                            Percent = 0.0,
                            To = new DateTime(2025, 4, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3907),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3906)
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3908),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3909),
                            Description = "Mua hàng tặng phiếu mua hàng trị giá 200,000 VNĐ",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3910),
                            IsActive = false,
                            Name = "Mua hàng tặng phiếu mua hàng",
                            Percent = 0.0,
                            To = new DateTime(2025, 5, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3911),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3909)
                        },
                        new
                        {
                            Id = 10,
                            BannerUrl = "/Images/Component/BannerPromotion1.gif",
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3912),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3912),
                            Description = "Siêu sale đồng giảm 50% giá sản phẩm",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3913),
                            IsActive = false,
                            Name = "Đồng giảm giá 50%",
                            Percent = 50.0,
                            To = new DateTime(2025, 6, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3914),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3912)
                        },
                        new
                        {
                            Id = 11,
                            BannerUrl = "/Images/Component/BannerPromotion2.webp",
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3915),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3916),
                            Description = "Siêu giảm giá mùa Ơ-RÔ",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3917),
                            IsActive = true,
                            Name = "Sôi động cùng mùa Ơ-rô",
                            Percent = 0.0,
                            To = new DateTime(2025, 6, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3917),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(3916)
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.ShippingOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ShippingOrders");
                });

            modelBuilder.Entity("DATN.Core.Model.TimeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimeRanges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxPrice = 1000000m,
                            MinPrice = 0m,
                            Name = "0 - 1 triệu"
                        },
                        new
                        {
                            Id = 2,
                            MaxPrice = 2000000m,
                            MinPrice = 1000000m,
                            Name = "1 triệu - 2 triệu"
                        },
                        new
                        {
                            Id = 3,
                            MaxPrice = 3000000m,
                            MinPrice = 2000000m,
                            Name = "2 triệu - 3 triệu"
                        },
                        new
                        {
                            Id = 4,
                            MaxPrice = 4000000m,
                            MinPrice = 3000000m,
                            Name = "3 triệu - 4 triệu"
                        },
                        new
                        {
                            Id = 5,
                            MaxPrice = 5000000m,
                            MinPrice = 4000000m,
                            Name = "4 triệu - 5 triệu"
                        },
                        new
                        {
                            Id = 6,
                            MaxPrice = 6000000m,
                            MinPrice = 5000000m,
                            Name = "5 triệu - 6 triệu"
                        },
                        new
                        {
                            Id = 7,
                            MaxPrice = 7000000m,
                            MinPrice = 6000000m,
                            Name = "6 triệu - 7 triệu"
                        },
                        new
                        {
                            Id = 8,
                            MaxPrice = 8000000m,
                            MinPrice = 7000000m,
                            Name = "7 triệu - 8 triệu"
                        },
                        new
                        {
                            Id = 9,
                            MaxPrice = 9000000m,
                            MinPrice = 8000000m,
                            Name = "8 triệu - 9 triệu"
                        },
                        new
                        {
                            Id = 10,
                            MaxPrice = 10000000m,
                            MinPrice = 9000000m,
                            Name = "9 triệu - 10 triệu"
                        },
                        new
                        {
                            Id = 11,
                            MaxPrice = 999999999m,
                            MinPrice = 10000000m,
                            Name = "Hơn 10 triệu"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinOrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityUsed")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "VOUCHER10",
                            CreateAt = new DateTime(2024, 8, 29, 17, 35, 57, 120, DateTimeKind.Local).AddTicks(964),
                            DeleteAt = new DateTime(2024, 8, 29, 17, 35, 57, 120, DateTimeKind.Local).AddTicks(964),
                            Description = "10% off",
                            DiscountAmount = 10m,
                            DiscountType = 0,
                            EndDate = new DateTime(2024, 9, 29, 17, 35, 57, 120, DateTimeKind.Local).AddTicks(972),
                            IsActive = true,
                            MaxDiscountAmount = 50m,
                            MinOrderAmount = 100m,
                            Name = "",
                            Quantity = 100,
                            QuantityUsed = 0,
                            StartDate = new DateTime(2024, 8, 29, 17, 35, 57, 120, DateTimeKind.Local).AddTicks(971),
                            UpdateAt = new DateTime(2024, 8, 29, 17, 35, 57, 120, DateTimeKind.Local).AddTicks(965),
                            UsageLimit = 10
                        },
                        new
                        {
                            Id = 2,
                            Code = "VOUCHER20",
                            CreateAt = new DateTime(2024, 8, 29, 17, 35, 57, 120, DateTimeKind.Local).AddTicks(980),
                            DeleteAt = new DateTime(2024, 8, 29, 17, 35, 57, 120, DateTimeKind.Local).AddTicks(981),
                            Description = "20% off",
                            DiscountAmount = 20m,
                            DiscountType = 0,
                            EndDate = new DateTime(2024, 10, 29, 17, 35, 57, 120, DateTimeKind.Local).AddTicks(984),
                            IsActive = true,
                            MaxDiscountAmount = 100m,
                            MinOrderAmount = 200m,
                            Name = "",
                            Quantity = 200,
                            QuantityUsed = 0,
                            StartDate = new DateTime(2024, 8, 29, 17, 35, 57, 120, DateTimeKind.Local).AddTicks(984),
                            UpdateAt = new DateTime(2024, 8, 29, 17, 35, 57, 120, DateTimeKind.Local).AddTicks(981),
                            UsageLimit = 20
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.VoucherCate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherCates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7200),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7193),
                            Description = "",
                            DiscountByPercent = 10,
                            DiscountByPrice = 0m,
                            Name = "VOUCHER10",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7195)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7203),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7202),
                            Description = "",
                            DiscountByPercent = 20,
                            DiscountByPrice = 0m,
                            Name = "VOUCHER20",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7202)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7207),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7204),
                            Description = "",
                            DiscountByPercent = 0,
                            DiscountByPrice = 300000m,
                            Name = "VOUCHER300000",
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7205)
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.VoucherUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7238),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7238),
                            Description = "",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7250),
                            IsDeleted = true,
                            Name = "",
                            To = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7238),
                            VoucherId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7251),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7252),
                            Description = "",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7253),
                            IsDeleted = false,
                            Name = "",
                            To = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7252),
                            VoucherId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            CreateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7254),
                            DeleteAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7254),
                            Description = "",
                            From = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7256),
                            IsDeleted = false,
                            Name = "",
                            To = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            UpdateAt = new DateTime(2024, 8, 30, 15, 31, 45, 406, DateTimeKind.Local).AddTicks(7255),
                            VoucherId = 3
                        });
                });

            modelBuilder.Entity("DATN.Core.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSentMail")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PendingCartId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PendingCartId")
                        .IsUnique()
                        .HasFilter("[PendingCartId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2753c921-2304-4f8d-b8d5-75229d3b20d6"),
                            AccessFailedCount = 0,
                            Address = "123 Main St, City A",
                            ConcurrencyStamp = "1b0b3ac5-9598-49f9-b067-38521086ffd5",
                            CreateDate = new DateTime(2024, 8, 30, 15, 31, 45, 200, DateTimeKind.Local).AddTicks(4096),
                            Description = "Admin",
                            Dob = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            IsSentMail = false,
                            LastLoginTime = new DateTime(2024, 8, 30, 8, 31, 45, 270, DateTimeKind.Utc).AddTicks(509),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOhXAOrwaGcVCMWpDOdKpKg0vXa5RtkJVNNbhfBni45WlqiH8TAhS0J5kRIc62QTfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            AccessFailedCount = 0,
                            Address = "456 Oak St, City B",
                            ConcurrencyStamp = "bc5ef72d-53dc-45ef-ad9d-be948b14aea1",
                            CreateDate = new DateTime(2024, 8, 30, 15, 31, 45, 270, DateTimeKind.Local).AddTicks(521),
                            Description = "Customer",
                            Dob = new DateTime(1991, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Customer",
                            IsSentMail = false,
                            LastLoginTime = new DateTime(2024, 8, 30, 8, 31, 45, 338, DateTimeKind.Utc).AddTicks(6957),
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@GMAIL.COM",
                            NormalizedUserName = "CUSTOMER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAvPa6NUdMp6p3j75G1w2Jy91K2e/K9cCpeVj/zcENWl4MYK4ZMRRrijTd+0qncVzw==",
                            PendingCartId = 1,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "customer@gmail.com",
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("aa7c5218-4f1e-4ac6-a3b4-08dcb162e29e"),
                            AccessFailedCount = 0,
                            Address = "456 Oak St, City B",
                            ConcurrencyStamp = "d5ebcd98-cf45-4856-894a-5818a03075a3",
                            CreateDate = new DateTime(2024, 8, 30, 15, 31, 45, 338, DateTimeKind.Local).AddTicks(6999),
                            Description = "Customer",
                            Dob = new DateTime(1991, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Customer",
                            IsSentMail = false,
                            LastLoginTime = new DateTime(2024, 8, 30, 8, 31, 45, 406, DateTimeKind.Utc).AddTicks(4768),
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER2@GMAIL.COM",
                            NormalizedUserName = "CUSTOMER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ4cWDwLiGkfLavikxd5yInJcgO8lo7Ku3DOVSBuKwyFiup5x5EfX9KROwMWmgtlXw==",
                            PendingCartId = 2,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "customer2@gmail.com",
                            isActive = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("fe0e9c2d-6abd-4f73-a635-63fc58ec700e"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("2753c921-2304-4f8d-b8d5-75229d3b20d6"),
                            RoleId = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca")
                        },
                        new
                        {
                            UserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            RoleId = new Guid("fe0e9c2d-6abd-4f73-a635-63fc58ec700e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DATN.Core.Model.Category", b =>
                {
                    b.HasOne("DATN.Core.Model.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("DATN.Core.Model.CategoryProduct", b =>
                {
                    b.HasOne("DATN.Core.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Product_EAV.Product_EAV", "Product")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN.Core.Model.CategoryTimeRange", b =>
                {
                    b.HasOne("DATN.Core.Model.Category", "Category")
                        .WithMany("CategoryTimeRanges")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.TimeRange", "TimeRange")
                        .WithMany("CategoryTimeRanges")
                        .HasForeignKey("TimeRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("TimeRange");
                });

            modelBuilder.Entity("DATN.Core.Model.Comment", b =>
                {
                    b.HasOne("DATN.Core.Model.InvoiceDetail", "InvoiceDetail")
                        .WithOne("Comment")
                        .HasForeignKey("DATN.Core.Model.Comment", "InvoiceDetailId");

                    b.HasOne("DATN.Core.Model.Product_EAV.Product_EAV", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Models.AppUser", "AppUser")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("InvoiceDetail");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN.Core.Model.Image", b =>
                {
                    b.HasOne("DATN.Core.Model.Product_EAV.Product_EAV", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN.Core.Model.Invoice", b =>
                {
                    b.HasOne("DATN.Core.Models.AppUser", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.VoucherUser", "VoucherUser")
                        .WithMany()
                        .HasForeignKey("VoucherUserId");

                    b.Navigation("User");

                    b.Navigation("VoucherUser");
                });

            modelBuilder.Entity("DATN.Core.Model.InvoiceDetail", b =>
                {
                    b.HasOne("DATN.Core.Model.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("DATN.Core.Model.Product_EAV.Variant", "Variant")
                        .WithMany()
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("DATN.Core.Model.PaymentInfo", b =>
                {
                    b.HasOne("DATN.Core.Model.Invoice", "Invoice")
                        .WithOne("PaymentInfo")
                        .HasForeignKey("DATN.Core.Model.PaymentInfo", "InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DATN.Core.Model.PendingCartVariant", b =>
                {
                    b.HasOne("DATN.Core.Model.PendingCart", "PendingCart")
                        .WithMany("PendingCartVariants")
                        .HasForeignKey("PendingCartId");

                    b.HasOne("DATN.Core.Model.Product_EAV.Variant", "Variant")
                        .WithMany("PendingCartVariants")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PendingCart");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("DATN.Core.Model.ProductPromotion", b =>
                {
                    b.HasOne("DATN.Core.Model.Product_EAV.Product_EAV", "Product")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Promotion", "Promotion")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.AttributeValue_EAV", b =>
                {
                    b.HasOne("DATN.Core.Model.Product_EAV.Attribute_EAV", "Attribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.Product_EAV", b =>
                {
                    b.HasOne("DATN.Core.Model.Brand", "Brand")
                        .WithMany("ProductEAVs")
                        .HasForeignKey("BrandId");

                    b.HasOne("DATN.Core.Model.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("DATN.Core.Model.Origin", "Origin")
                        .WithMany("Products")
                        .HasForeignKey("OriginId");

                    b.Navigation("Brand");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.Specification", b =>
                {
                    b.HasOne("DATN.Core.Model.Product_EAV.Variant", "Variant")
                        .WithMany("Specifications")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.Variant", b =>
                {
                    b.HasOne("DATN.Core.Model.Product_EAV.Product_EAV", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.VariantAttribute", b =>
                {
                    b.HasOne("DATN.Core.Model.Product_EAV.AttributeValue_EAV", "AttributeValue")
                        .WithMany("VariantAttributes")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Product_EAV.Variant", "Variant")
                        .WithMany("VariantAttributes")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("DATN.Core.Model.ShippingOrder", b =>
                {
                    b.HasOne("DATN.Core.Model.Invoice", "Invoice")
                        .WithOne("ShippingOrder")
                        .HasForeignKey("DATN.Core.Model.ShippingOrder", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Models.AppUser", "User")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("UserId");

                    b.Navigation("Invoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DATN.Core.Model.VoucherCate", b =>
                {
                    b.HasOne("DATN.Core.Model.Category", "Category")
                        .WithMany("VoucherCates")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Voucher", "Voucher")
                        .WithMany("VoucherCates")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("DATN.Core.Model.VoucherProduct", b =>
                {
                    b.HasOne("DATN.Core.Model.Product_EAV.Product_EAV", "Product")
                        .WithMany("VoucherProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Voucher", "Voucher")
                        .WithMany("VoucherProducts")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("DATN.Core.Model.VoucherUser", b =>
                {
                    b.HasOne("DATN.Core.Models.AppUser", "AppUser")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Voucher", "Voucher")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("DATN.Core.Models.AppUser", b =>
                {
                    b.HasOne("DATN.Core.Model.PendingCart", "PendingCart")
                        .WithOne("AppUser")
                        .HasForeignKey("DATN.Core.Models.AppUser", "PendingCartId");

                    b.Navigation("PendingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DATN.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DATN.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DATN.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DATN.Core.Model.Brand", b =>
                {
                    b.Navigation("ProductEAVs");
                });

            modelBuilder.Entity("DATN.Core.Model.Category", b =>
                {
                    b.Navigation("CategoryTimeRanges");

                    b.Navigation("Products");

                    b.Navigation("SubCategories");

                    b.Navigation("VoucherCates");
                });

            modelBuilder.Entity("DATN.Core.Model.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("PaymentInfo");

                    b.Navigation("ShippingOrder");
                });

            modelBuilder.Entity("DATN.Core.Model.InvoiceDetail", b =>
                {
                    b.Navigation("Comment");
                });

            modelBuilder.Entity("DATN.Core.Model.Origin", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DATN.Core.Model.PendingCart", b =>
                {
                    b.Navigation("AppUser")
                        .IsRequired();

                    b.Navigation("PendingCartVariants");
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.AttributeValue_EAV", b =>
                {
                    b.Navigation("VariantAttributes");
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.Attribute_EAV", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.Product_EAV", b =>
                {
                    b.Navigation("CategoryProducts");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("PromotionProducts");

                    b.Navigation("Variants");

                    b.Navigation("VoucherProducts");
                });

            modelBuilder.Entity("DATN.Core.Model.Product_EAV.Variant", b =>
                {
                    b.Navigation("PendingCartVariants");

                    b.Navigation("Specifications");

                    b.Navigation("VariantAttributes");
                });

            modelBuilder.Entity("DATN.Core.Model.Promotion", b =>
                {
                    b.Navigation("ProductPromotions");
                });

            modelBuilder.Entity("DATN.Core.Model.TimeRange", b =>
                {
                    b.Navigation("CategoryTimeRanges");
                });

            modelBuilder.Entity("DATN.Core.Model.Voucher", b =>
                {
                    b.Navigation("VoucherCates");

                    b.Navigation("VoucherProducts");

                    b.Navigation("VoucherUsers");
                });

            modelBuilder.Entity("DATN.Core.Models.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Invoices");

                    b.Navigation("ShippingOrders");

                    b.Navigation("VoucherUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
